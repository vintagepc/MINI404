/*
    stm32g070xx.h - Chip variant definition for the STM32F030xx

	Copyright 2022 VintagePC <https://github.com/vintagepc/>

 	This file is part of Mini404.

	Mini404 is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	Mini404 is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with Mini404.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef HW_ARM_PRUSA_STM32G070XX_H
#define HW_ARM_PRUSA_STM32G070XX_H

#include "../stm32_common/stm32_chip_macros.h"
#include "../stm32_common/stm32_types.h"
#include "hw/misc/stm32f4xx_exti.h"
#include "hw/timer/stm32f2xx_timer.h"
#include "hw/misc/stm32f4xx_syscfg.h"
#include "../stm32f407/stm32f2xx_i2c.h"
#include "../stm32f407/stm32f2xx_pwr.h"
#include "../stm32f407/stm32f2xx_rtc.h"
#include "../stm32f407/stm32f2xx_tim.h"
#include "../stm32f407/stm32f4xx_rng.h"
#include "../utility/macros.h"
#include "qemu/units.h"
// IRQs:
#define _I(x) _JOIN3R(G070_, x, _IRQ)

enum G070_IRQ{
	_I(WWDG) = 0,
	_I(RTC) = 2,
	_I(FLASH),
	_I(RCC),
	_I(EXTI0_1),
	_I(EXTI2_3),
	_I(EXTI4_15),
	_I(DMA1_CH1) = 9,
	_I(DMA1_CH2_3),
	_I(DMA1_CH4_7_DMAMUX_DMA2_CH1_5),
	_I(ADC),
	_I(TIM1_BRK_UP_TRG_COM),
	_I(TIM1_CC),
	_I(TIM3_4) = 16,
	_I(TIM6),
	_I(TIM7),
	_I(TIM14),
	_I(TIM15),
	_I(TIM16),
	_I(TIM17),
	_I(I2C1),
	_I(I2C2_3),
	_I(SPI1),
	_I(SPI2_3),
	_I(USART1),
	_I(USART2),
	_I(USART_3_4_5_6),
	_I(RESERVED1),
	_I(RESERVED2),
	_I(COUNT) // IRQ size tracking.
};
#undef _I

static const stm32_soc_cfg_t stm32g070xx_cfg =
{
	.name = "STM32G070",
	.nvic_irqs = G070_COUNT_IRQ,
	.rcc_hse_freq = 12000000,
	.rcc_hsi_freq = 16000000,
	.rcc_lse_freq = 32768,
	.rcc_lsi_freq = 32000,
	.flash_base = 0x08000000,
	.flash_variants = {
		{TYPE_STM32G070xB_SOC, 128U*KiB},
		{NULL}
	},
	.sram_base = 0x20000000,
	.sram_variants = {
		{TYPE_STM32G070xB_SOC, 36U*KiB},
		{NULL}
	},
	.ccmsram_base = 0x10000000,
	.ccmsram_variants = {
		{TYPE_STM32G070xB_SOC, 64U*KiB},
		{NULL}
	},
	.perhipherals = {
		PER_LNI(P_TIM1, 	TYPE_STM32F4XX_TIMER, 0x40012C00, IRQ_SKIP_CONNECT, G070_TIM1_BRK_UP_TRG_COM_IRQ, G070_TIM1_BRK_UP_TRG_COM_IRQ, G070_TIM1_BRK_UP_TRG_COM_IRQ, G070_TIM1_CC_IRQ),
		PER_LNI(P_TIM3, 	TYPE_STM32F4XX_TIMER, 0x40000400, G070_TIM3_4_IRQ),
		//PER_LNI(P_TIM4, 	TYPE_STM32F4XX_TIMER, 0x40000800, G070_TIM3_4_IRQ),
		PER_LNI(P_TIM6, 	TYPE_STM32F4XX_TIMER, 0x40001000, G070_TIM6_IRQ),
		PER_LNI(P_TIM7, 	TYPE_STM32F4XX_TIMER, 0x40001400, G070_TIM7_IRQ),
		PER_LNI(P_TIM14, 	TYPE_STM32F4XX_TIMER, 0x40002000, G070_TIM14_IRQ),
		PER_LNI(P_TIM15, 	TYPE_STM32F4XX_TIMER, 0x40014000, G070_TIM15_IRQ),
		PER_LNI(P_TIM16, 	TYPE_STM32F4XX_TIMER, 0x40014400, G070_TIM16_IRQ),
		PER_LNI(P_TIM17, 	TYPE_STM32F4XX_TIMER, 0x40014800, G070_TIM17_IRQ),

		PER_LNI(P_UART1, TYPE_STM32G070_USART, 0x40013800, G070_USART1_IRQ),
		PER_LNI(P_UART2, TYPE_STM32G070_USART, 0x40004400, G070_USART2_IRQ),
		PER_LNI(P_UART3, TYPE_STM32G070_USART, 0x40004800, G070_USART_3_4_5_6_IRQ),
		PER_LNI(P_UART4, TYPE_STM32G070_USART, 0x40004C00, G070_USART_3_4_5_6_IRQ),
		PER_LNI(P_UART5, TYPE_STM32G070_USART, 0x40005000, G070_USART_3_4_5_6_IRQ),
		PER_LNI(P_UART6, TYPE_STM32G070_USART, 0x40013C00, G070_USART_3_4_5_6_IRQ),

		PER_LN(P_GPIOA, TYPE_STM32G070_GPIO, 0x50000000),
		PER_LN(P_GPIOB, TYPE_STM32G070_GPIO, 0x50000400),
		PER_LN(P_GPIOC, TYPE_STM32G070_GPIO, 0x50000800),
		PER_LN(P_GPIOD, TYPE_STM32G070_GPIO, 0x50000C00),
		PER_LN(P_GPIOE, TYPE_STM32G070_GPIO, 0x50001000),
		PER_LN(P_GPIOF, TYPE_STM32G070_GPIO, 0x50001400),

		PER_LNI(P_DMA1, TYPE_STM32G070_DMA, 0x40020000, [0] = G070_DMA1_CH1_IRQ, [1 ... 2] = G070_DMA1_CH2_3_IRQ, [3 ... 6] = G070_DMA1_CH4_7_DMAMUX_DMA2_CH1_5_IRQ),
		PER_LNI(P_DMA2, TYPE_STM32G070_DMA, 0x40020400, [0 ... 4] = G070_DMA1_CH4_7_DMAMUX_DMA2_CH1_5_IRQ),

		PER_LNI(P_I2C1, NULL, 0x40005400, G070_I2C1_IRQ),
		PER_LNI(P_I2C2, NULL, 0x40005800, G070_I2C2_3_IRQ),
		PER_LNI(P_I2C3, NULL, 0x40008800, G070_I2C2_3_IRQ),

		PER_LNI(P_SPI1, TYPE_STM32G070_SPI, 0x40013000, G070_SPI1_IRQ),
		PER_LNI(P_SPI2, TYPE_STM32G070_SPI, 0x40003800, G070_SPI2_3_IRQ),
		PER_LNI(P_SPI3, TYPE_STM32G070_SPI, 0x40003C00, G070_SPI2_3_IRQ),

		PER_LNI(P_ADC1, TYPE_STM32G070_ADC, 0x40012400, G070_ADC_IRQ),
		PER_LN(P_ADCC, TYPE_STM32G070_ADCC, 0x40012400 + 0x308),

		PER_LNI(P_RCC, TYPE_STM32G070_RCC, 0x40021000, G070_RCC_IRQ),
		PER_LNI(P_FINT, TYPE_STM32G070_FINT, 0x40022000, G070_FLASH_IRQ),
		PER_LN(P_IWDG, TYPE_STM32G070_IWDG, 0x40003000),
		PER_LN(P_CRC, TYPE_STM32G070_CRC, 0x40023000),
		PER_LN(P_SYSCFG, TYPE_STM32G070_SYSCFG, 0x40010000),

		PER_LN(P_OTP, TYPE_STM32G070_OTP, 0x1FFF7000),

		PER_LNI(P_DMAMUX, TYPE_STM32G070_DMAMUX, 0x40020800, G070_DMA1_CH4_7_DMAMUX_DMA2_CH1_5_IRQ),

		PER_LNI(P_EXTI, TYPE_STM32G070_EXTI, 0x40021800, [0 ... 1] = G070_EXTI0_1_IRQ, [2 ... 3] = G070_EXTI2_3_IRQ, [4 ... 15] = G070_EXTI4_15_IRQ),
		PER_LN(P_DBG, TYPE_STM32G070_DBG, 0x40015800),
	}
} ;

#endif // HW_ARM_PRUSA_STM32G070XX_H
