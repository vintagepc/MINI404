/*
	thermistortables.h - Marlin thermistor table definitions from the Prusa Marlin fork.

 	This file is part of MINI404.

	MINI404 is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	MINI404 is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with MINI404.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef THERMISTORTABLES_H_
#define THERMISTORTABLES_H_

#define THERMISTORHEATER_0 5
#define THERMISTORHEATER_1 22
#define THERMISTORHEATER_2 0
#define THERMISTORHEATER_3 0
#define THERMISTORHEATER_4 0


#define THERMISTORBED 1
#define THERMISTORAMBIENT 2000

#define PROGMEM

#define OVERSAMPLENR 16

#if (THERMISTORHEATER_0 == 1) || (THERMISTORHEATER_1 == 1)  || (THERMISTORHEATER_2 == 1) || (THERMISTORBED == 1) //100k bed thermistor

const short temptable_1[][2] PROGMEM = {
{       23*OVERSAMPLENR ,       300     },
{       25*OVERSAMPLENR ,       295     },
{       27*OVERSAMPLENR ,       290     },
{       28*OVERSAMPLENR ,       285     },
{       31*OVERSAMPLENR ,       280     },
{       33*OVERSAMPLENR ,       275     },
{       35*OVERSAMPLENR ,       270     },
{       38*OVERSAMPLENR ,       265     },
{       41*OVERSAMPLENR ,       260     },
{       44*OVERSAMPLENR ,       255     },
{       48*OVERSAMPLENR ,       250     },
{       52*OVERSAMPLENR ,       245     },
{       56*OVERSAMPLENR ,       240     },
{       61*OVERSAMPLENR ,       235     },
{       66*OVERSAMPLENR ,       230     },
{       71*OVERSAMPLENR ,       225     },
{       78*OVERSAMPLENR ,       220     },
{       84*OVERSAMPLENR ,       215     },
{       92*OVERSAMPLENR ,       210     },
{       100*OVERSAMPLENR        ,       205     },
{       109*OVERSAMPLENR        ,       200     },
{       120*OVERSAMPLENR        ,       195     },
{       131*OVERSAMPLENR        ,       190     },
{       143*OVERSAMPLENR        ,       185     },
{       156*OVERSAMPLENR        ,       180     },
{       171*OVERSAMPLENR        ,       175     },
{       187*OVERSAMPLENR        ,       170     },
{       205*OVERSAMPLENR        ,       165     },
{       224*OVERSAMPLENR        ,       160     },
{       245*OVERSAMPLENR        ,       155     },
{       268*OVERSAMPLENR        ,       150     },
{       293*OVERSAMPLENR        ,       145     },
{       320*OVERSAMPLENR        ,       140     },
{       348*OVERSAMPLENR        ,       135     },
{       379*OVERSAMPLENR        ,       130     },
{       411*OVERSAMPLENR        ,       125     },
{       445*OVERSAMPLENR        ,       120     },
{       480*OVERSAMPLENR        ,       115     },
{       516*OVERSAMPLENR        ,       110     },
{       553*OVERSAMPLENR        ,       105     },
{       591*OVERSAMPLENR        ,       100     },
{       628*OVERSAMPLENR        ,       95      },
{       665*OVERSAMPLENR        ,       90      },
{       702*OVERSAMPLENR        ,       85      },
{       737*OVERSAMPLENR        ,       80      },
{       770*OVERSAMPLENR        ,       75      },
{       801*OVERSAMPLENR        ,       70      },
{       830*OVERSAMPLENR        ,       65      },
{       857*OVERSAMPLENR        ,       60      },
{       881*OVERSAMPLENR        ,       55      },
{       903*OVERSAMPLENR        ,       50      },
{       922*OVERSAMPLENR        ,       45      },
{       939*OVERSAMPLENR        ,       40      },
{       954*OVERSAMPLENR        ,       35      },
{       966*OVERSAMPLENR        ,       30      },
{       977*OVERSAMPLENR        ,       25      },
{       985*OVERSAMPLENR        ,       20      },
{       993*OVERSAMPLENR        ,       15      },
{       999*OVERSAMPLENR        ,       10      },
{       1004*OVERSAMPLENR       ,       5       },
{       1008*OVERSAMPLENR       ,       0       } //safety
};
#endif
#if (THERMISTORHEATER_0 == 2) || (THERMISTORHEATER_1 == 2) || (THERMISTORHEATER_2 == 2) || (THERMISTORBED == 2) //200k bed thermistor
const short temptable_2[][2] PROGMEM = {
//200k ATC Semitec 204GT-2
//Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 4.7kohm pullup, voltage divider math, and manufacturer provided temp/resistance
   {1*OVERSAMPLENR, 848},
   {30*OVERSAMPLENR, 300}, //top rating 300C
   {34*OVERSAMPLENR, 290},
   {39*OVERSAMPLENR, 280},
   {46*OVERSAMPLENR, 270},
   {53*OVERSAMPLENR, 260},
   {63*OVERSAMPLENR, 250},
   {74*OVERSAMPLENR, 240},
   {87*OVERSAMPLENR, 230},
   {104*OVERSAMPLENR, 220},
   {124*OVERSAMPLENR, 210},
   {148*OVERSAMPLENR, 200},
   {176*OVERSAMPLENR, 190},
   {211*OVERSAMPLENR, 180},
   {252*OVERSAMPLENR, 170},
   {301*OVERSAMPLENR, 160},
   {357*OVERSAMPLENR, 150},
   {420*OVERSAMPLENR, 140},
   {489*OVERSAMPLENR, 130},
   {562*OVERSAMPLENR, 120},
   {636*OVERSAMPLENR, 110},
   {708*OVERSAMPLENR, 100},
   {775*OVERSAMPLENR, 90},
   {835*OVERSAMPLENR, 80},
   {884*OVERSAMPLENR, 70},
   {924*OVERSAMPLENR, 60},
   {955*OVERSAMPLENR, 50},
   {977*OVERSAMPLENR, 40},
   {993*OVERSAMPLENR, 30},
   {1004*OVERSAMPLENR, 20},
   {1012*OVERSAMPLENR, 10},
   {1016*OVERSAMPLENR, 0},
};

#endif
#if (THERMISTORHEATER_0 == 3) || (THERMISTORHEATER_1 == 3) || (THERMISTORHEATER_2 == 3) || (THERMISTORBED == 3) //mendel-parts
const short temptable_3[][2] PROGMEM = {
                {1*OVERSAMPLENR,864},
                {21*OVERSAMPLENR,300},
                {25*OVERSAMPLENR,290},
                {29*OVERSAMPLENR,280},
                {33*OVERSAMPLENR,270},
                {39*OVERSAMPLENR,260},
                {46*OVERSAMPLENR,250},
                {54*OVERSAMPLENR,240},
                {64*OVERSAMPLENR,230},
                {75*OVERSAMPLENR,220},
                {90*OVERSAMPLENR,210},
                {107*OVERSAMPLENR,200},
                {128*OVERSAMPLENR,190},
                {154*OVERSAMPLENR,180},
                {184*OVERSAMPLENR,170},
                {221*OVERSAMPLENR,160},
                {265*OVERSAMPLENR,150},
                {316*OVERSAMPLENR,140},
                {375*OVERSAMPLENR,130},
                {441*OVERSAMPLENR,120},
                {513*OVERSAMPLENR,110},
                {588*OVERSAMPLENR,100},
                {734*OVERSAMPLENR,80},
                {856*OVERSAMPLENR,60},
                {938*OVERSAMPLENR,40},
                {986*OVERSAMPLENR,20},
                {1008*OVERSAMPLENR,0},
                {1018*OVERSAMPLENR,-20}
        };

#endif
#if (THERMISTORHEATER_0 == 4) || (THERMISTORHEATER_1 == 4) || (THERMISTORHEATER_2 == 4) || (THERMISTORBED == 4) //10k thermistor
const short temptable_4[][2] PROGMEM = {
   {1*OVERSAMPLENR, 430},
   {54*OVERSAMPLENR, 137},
   {107*OVERSAMPLENR, 107},
   {160*OVERSAMPLENR, 91},
   {213*OVERSAMPLENR, 80},
   {266*OVERSAMPLENR, 71},
   {319*OVERSAMPLENR, 64},
   {372*OVERSAMPLENR, 57},
   {425*OVERSAMPLENR, 51},
   {478*OVERSAMPLENR, 46},
   {531*OVERSAMPLENR, 41},
   {584*OVERSAMPLENR, 35},
   {637*OVERSAMPLENR, 30},
   {690*OVERSAMPLENR, 25},
   {743*OVERSAMPLENR, 20},
   {796*OVERSAMPLENR, 14},
   {849*OVERSAMPLENR, 7},
   {902*OVERSAMPLENR, 0},
   {955*OVERSAMPLENR, -11},
   {1008*OVERSAMPLENR, -35}
};
#endif

#if (THERMISTORHEATER_0 == 5) || (THERMISTORHEATER_1 == 5) || (THERMISTORHEATER_2 == 5) || (THERMISTORBED == 5) //100k ParCan thermistor (104GT-2)
const short temptable_5[][2] PROGMEM = {
// ATC Semitec 104GT-2 (Used in ParCan)
// Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 4.7kohm pullup, voltage divider math, and manufacturer provided temp/resistance
   {1*OVERSAMPLENR, 713},
   {17*OVERSAMPLENR, 300}, //top rating 300C
   {20*OVERSAMPLENR, 290},
   {23*OVERSAMPLENR, 280},
   {27*OVERSAMPLENR, 270},
   {31*OVERSAMPLENR, 260},
   {37*OVERSAMPLENR, 250},
   {43*OVERSAMPLENR, 240},
   {51*OVERSAMPLENR, 230},
   {61*OVERSAMPLENR, 220},
   {73*OVERSAMPLENR, 210},
   {87*OVERSAMPLENR, 200},
   {106*OVERSAMPLENR, 190},
   {128*OVERSAMPLENR, 180},
   {155*OVERSAMPLENR, 170},
   {189*OVERSAMPLENR, 160},
   {230*OVERSAMPLENR, 150},
   {278*OVERSAMPLENR, 140},
   {336*OVERSAMPLENR, 130},
   {402*OVERSAMPLENR, 120},
   {476*OVERSAMPLENR, 110},
   {554*OVERSAMPLENR, 100},
   {635*OVERSAMPLENR, 90},
   {713*OVERSAMPLENR, 80},
   {784*OVERSAMPLENR, 70},
   {846*OVERSAMPLENR, 60},
   {897*OVERSAMPLENR, 50},
   {937*OVERSAMPLENR, 40},
   {966*OVERSAMPLENR, 30},
   {986*OVERSAMPLENR, 20},
   {1000*OVERSAMPLENR, 10},
   {1010*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 6) || (THERMISTORHEATER_1 == 6) || (THERMISTORHEATER_2 == 6) || (THERMISTORBED == 6) // 100k Epcos thermistor
const short temptable_6[][2] PROGMEM = {
   {1*OVERSAMPLENR, 350},
   {28*OVERSAMPLENR, 250}, //top rating 250C
   {31*OVERSAMPLENR, 245},
   {35*OVERSAMPLENR, 240},
   {39*OVERSAMPLENR, 235},
   {42*OVERSAMPLENR, 230},
   {44*OVERSAMPLENR, 225},
   {49*OVERSAMPLENR, 220},
   {53*OVERSAMPLENR, 215},
   {62*OVERSAMPLENR, 210},
   {71*OVERSAMPLENR, 205}, //fitted graphically
   {78*OVERSAMPLENR, 200}, //fitted graphically
   {94*OVERSAMPLENR, 190},
   {102*OVERSAMPLENR, 185},
   {116*OVERSAMPLENR, 170},
   {143*OVERSAMPLENR, 160},
   {183*OVERSAMPLENR, 150},
   {223*OVERSAMPLENR, 140},
   {270*OVERSAMPLENR, 130},
   {318*OVERSAMPLENR, 120},
   {383*OVERSAMPLENR, 110},
   {413*OVERSAMPLENR, 105},
   {439*OVERSAMPLENR, 100},
   {484*OVERSAMPLENR, 95},
   {513*OVERSAMPLENR, 90},
   {607*OVERSAMPLENR, 80},
   {664*OVERSAMPLENR, 70},
   {781*OVERSAMPLENR, 60},
   {810*OVERSAMPLENR, 55},
   {849*OVERSAMPLENR, 50},
   {914*OVERSAMPLENR, 45},
   {914*OVERSAMPLENR, 40},
   {935*OVERSAMPLENR, 35},
   {954*OVERSAMPLENR, 30},
   {970*OVERSAMPLENR, 25},
   {978*OVERSAMPLENR, 22},
   {1008*OVERSAMPLENR, 3},
   {1023*OVERSAMPLENR, 0}  //to allow internal 0 degrees C
};
#endif

#if (THERMISTORHEATER_0 == 7) || (THERMISTORHEATER_1 == 7) || (THERMISTORHEATER_2 == 7) || (THERMISTORBED == 7) // 100k Honeywell 135-104LAG-J01
const short temptable_7[][2] PROGMEM = {
   {1*OVERSAMPLENR, 941},
   {19*OVERSAMPLENR, 362},
   {37*OVERSAMPLENR, 299}, //top rating 300C
   {55*OVERSAMPLENR, 266},
   {73*OVERSAMPLENR, 245},
   {91*OVERSAMPLENR, 229},
   {109*OVERSAMPLENR, 216},
   {127*OVERSAMPLENR, 206},
   {145*OVERSAMPLENR, 197},
   {163*OVERSAMPLENR, 190},
   {181*OVERSAMPLENR, 183},
   {199*OVERSAMPLENR, 177},
   {217*OVERSAMPLENR, 171},
   {235*OVERSAMPLENR, 166},
   {253*OVERSAMPLENR, 162},
   {271*OVERSAMPLENR, 157},
   {289*OVERSAMPLENR, 153},
   {307*OVERSAMPLENR, 149},
   {325*OVERSAMPLENR, 146},
   {343*OVERSAMPLENR, 142},
   {361*OVERSAMPLENR, 139},
   {379*OVERSAMPLENR, 135},
   {397*OVERSAMPLENR, 132},
   {415*OVERSAMPLENR, 129},
   {433*OVERSAMPLENR, 126},
   {451*OVERSAMPLENR, 123},
   {469*OVERSAMPLENR, 121},
   {487*OVERSAMPLENR, 118},
   {505*OVERSAMPLENR, 115},
   {523*OVERSAMPLENR, 112},
   {541*OVERSAMPLENR, 110},
   {559*OVERSAMPLENR, 107},
   {577*OVERSAMPLENR, 105},
   {595*OVERSAMPLENR, 102},
   {613*OVERSAMPLENR, 99},
   {631*OVERSAMPLENR, 97},
   {649*OVERSAMPLENR, 94},
   {667*OVERSAMPLENR, 92},
   {685*OVERSAMPLENR, 89},
   {703*OVERSAMPLENR, 86},
   {721*OVERSAMPLENR, 84},
   {739*OVERSAMPLENR, 81},
   {757*OVERSAMPLENR, 78},
   {775*OVERSAMPLENR, 75},
   {793*OVERSAMPLENR, 72},
   {811*OVERSAMPLENR, 69},
   {829*OVERSAMPLENR, 66},
   {847*OVERSAMPLENR, 62},
   {865*OVERSAMPLENR, 59},
   {883*OVERSAMPLENR, 55},
   {901*OVERSAMPLENR, 51},
   {919*OVERSAMPLENR, 46},
   {937*OVERSAMPLENR, 41},
   {955*OVERSAMPLENR, 35},
   {973*OVERSAMPLENR, 27},
   {991*OVERSAMPLENR, 17},
   {1009*OVERSAMPLENR, 1},
   {1023*OVERSAMPLENR, 0}  //to allow internal 0 degrees C
};
#endif

#if (THERMISTORHEATER_0 == 71) || (THERMISTORHEATER_1 == 71) || (THERMISTORHEATER_2 == 71) || (THERMISTORBED == 71) // 100k Honeywell 135-104LAF-J01
// R0 = 100000 Ohm
// T0 = 25 °C
// Beta = 3974
// R1 = 0 Ohm
// R2 = 4700 Ohm
const short temptable_71[][2] PROGMEM = {
   {35*OVERSAMPLENR, 300},
   {51*OVERSAMPLENR, 270},
   {54*OVERSAMPLENR, 265},
   {58*OVERSAMPLENR, 260},
   {59*OVERSAMPLENR, 258},
   {61*OVERSAMPLENR, 256},
   {63*OVERSAMPLENR, 254},
   {64*OVERSAMPLENR, 252},
   {66*OVERSAMPLENR, 250},
   {67*OVERSAMPLENR, 249},
   {68*OVERSAMPLENR, 248},
   {69*OVERSAMPLENR, 247},
   {70*OVERSAMPLENR, 246},
   {71*OVERSAMPLENR, 245},
   {72*OVERSAMPLENR, 244},
   {73*OVERSAMPLENR, 243},
   {74*OVERSAMPLENR, 242},
   {75*OVERSAMPLENR, 241},
   {76*OVERSAMPLENR, 240},
   {77*OVERSAMPLENR, 239},
   {78*OVERSAMPLENR, 238},
   {79*OVERSAMPLENR, 237},
   {80*OVERSAMPLENR, 236},
   {81*OVERSAMPLENR, 235},
   {82*OVERSAMPLENR, 234},
   {84*OVERSAMPLENR, 233},
   {85*OVERSAMPLENR, 232},
   {86*OVERSAMPLENR, 231},
   {87*OVERSAMPLENR, 230},
   {89*OVERSAMPLENR, 229},
   {90*OVERSAMPLENR, 228},
   {91*OVERSAMPLENR, 227},
   {92*OVERSAMPLENR, 226},
   {94*OVERSAMPLENR, 225},
   {95*OVERSAMPLENR, 224},
   {97*OVERSAMPLENR, 223},
   {98*OVERSAMPLENR, 222},
   {99*OVERSAMPLENR, 221},
   {101*OVERSAMPLENR, 220},
   {102*OVERSAMPLENR, 219},
   {104*OVERSAMPLENR, 218},
   {106*OVERSAMPLENR, 217},
   {107*OVERSAMPLENR, 216},
   {109*OVERSAMPLENR, 215},
   {110*OVERSAMPLENR, 214},
   {112*OVERSAMPLENR, 213},
   {114*OVERSAMPLENR, 212},
   {115*OVERSAMPLENR, 211},
   {117*OVERSAMPLENR, 210},
   {119*OVERSAMPLENR, 209},
   {121*OVERSAMPLENR, 208},
   {123*OVERSAMPLENR, 207},
   {125*OVERSAMPLENR, 206},
   {126*OVERSAMPLENR, 205},
   {128*OVERSAMPLENR, 204},
   {130*OVERSAMPLENR, 203},
   {132*OVERSAMPLENR, 202},
   {134*OVERSAMPLENR, 201},
   {136*OVERSAMPLENR, 200},
   {139*OVERSAMPLENR, 199},
   {141*OVERSAMPLENR, 198},
   {143*OVERSAMPLENR, 197},
   {145*OVERSAMPLENR, 196},
   {147*OVERSAMPLENR, 195},
   {150*OVERSAMPLENR, 194},
   {152*OVERSAMPLENR, 193},
   {154*OVERSAMPLENR, 192},
   {157*OVERSAMPLENR, 191},
   {159*OVERSAMPLENR, 190},
   {162*OVERSAMPLENR, 189},
   {164*OVERSAMPLENR, 188},
   {167*OVERSAMPLENR, 187},
   {170*OVERSAMPLENR, 186},
   {172*OVERSAMPLENR, 185},
   {175*OVERSAMPLENR, 184},
   {178*OVERSAMPLENR, 183},
   {181*OVERSAMPLENR, 182},
   {184*OVERSAMPLENR, 181},
   {187*OVERSAMPLENR, 180},
   {190*OVERSAMPLENR, 179},
   {193*OVERSAMPLENR, 178},
   {196*OVERSAMPLENR, 177},
   {199*OVERSAMPLENR, 176},
   {202*OVERSAMPLENR, 175},
   {205*OVERSAMPLENR, 174},
   {208*OVERSAMPLENR, 173},
   {212*OVERSAMPLENR, 172},
   {215*OVERSAMPLENR, 171},
   {219*OVERSAMPLENR, 170},
   {237*OVERSAMPLENR, 165},
   {256*OVERSAMPLENR, 160},
   {300*OVERSAMPLENR, 150},
   {351*OVERSAMPLENR, 140},
   {470*OVERSAMPLENR, 120},
   {504*OVERSAMPLENR, 115},
   {538*OVERSAMPLENR, 110},
   {552*OVERSAMPLENR, 108},
   {566*OVERSAMPLENR, 106},
   {580*OVERSAMPLENR, 104},
   {594*OVERSAMPLENR, 102},
   {608*OVERSAMPLENR, 100},
   {622*OVERSAMPLENR, 98},
   {636*OVERSAMPLENR, 96},
   {650*OVERSAMPLENR, 94},
   {664*OVERSAMPLENR, 92},
   {678*OVERSAMPLENR, 90},
   {712*OVERSAMPLENR, 85},
   {745*OVERSAMPLENR, 80},
   {758*OVERSAMPLENR, 78},
   {770*OVERSAMPLENR, 76},
   {783*OVERSAMPLENR, 74},
   {795*OVERSAMPLENR, 72},
   {806*OVERSAMPLENR, 70},
   {818*OVERSAMPLENR, 68},
   {829*OVERSAMPLENR, 66},
   {840*OVERSAMPLENR, 64},
   {850*OVERSAMPLENR, 62},
   {860*OVERSAMPLENR, 60},
   {870*OVERSAMPLENR, 58},
   {879*OVERSAMPLENR, 56},
   {888*OVERSAMPLENR, 54},
   {897*OVERSAMPLENR, 52},
   {905*OVERSAMPLENR, 50},
   {924*OVERSAMPLENR, 45},
   {940*OVERSAMPLENR, 40},
   {955*OVERSAMPLENR, 35},
   {967*OVERSAMPLENR, 30},
   {970*OVERSAMPLENR, 29},
   {972*OVERSAMPLENR, 28},
   {974*OVERSAMPLENR, 27},
   {976*OVERSAMPLENR, 26},
   {978*OVERSAMPLENR, 25},
   {980*OVERSAMPLENR, 24},
   {982*OVERSAMPLENR, 23},
   {984*OVERSAMPLENR, 22},
   {985*OVERSAMPLENR, 21},
   {987*OVERSAMPLENR, 20},
   {995*OVERSAMPLENR, 15},
   {1001*OVERSAMPLENR, 10},
   {1006*OVERSAMPLENR, 5},
   {1010*OVERSAMPLENR, 0},
};
#endif

#if (THERMISTORHEATER_0 == 8) || (THERMISTORHEATER_1 == 8) || (THERMISTORHEATER_2 == 8) || (THERMISTORBED == 8)
// 100k 0603 SMD Vishay NTCS0603E3104FXT (4.7k pullup)
const short temptable_8[][2] PROGMEM = {
   {1*OVERSAMPLENR, 704},
   {54*OVERSAMPLENR, 216},
   {107*OVERSAMPLENR, 175},
   {160*OVERSAMPLENR, 152},
   {213*OVERSAMPLENR, 137},
   {266*OVERSAMPLENR, 125},
   {319*OVERSAMPLENR, 115},
   {372*OVERSAMPLENR, 106},
   {425*OVERSAMPLENR, 99},
   {478*OVERSAMPLENR, 91},
   {531*OVERSAMPLENR, 85},
   {584*OVERSAMPLENR, 78},
   {637*OVERSAMPLENR, 71},
   {690*OVERSAMPLENR, 65},
   {743*OVERSAMPLENR, 58},
   {796*OVERSAMPLENR, 50},
   {849*OVERSAMPLENR, 42},
   {902*OVERSAMPLENR, 31},
   {955*OVERSAMPLENR, 17},
   {1008*OVERSAMPLENR, 0}
};
#endif
#if (THERMISTORHEATER_0 == 9) || (THERMISTORHEATER_1 == 9) || (THERMISTORHEATER_2 == 9) || (THERMISTORBED == 9)
// 100k GE Sensing AL03006-58.2K-97-G1 (4.7k pullup)
const short temptable_9[][2] PROGMEM = {
	{1*OVERSAMPLENR, 936},
	{36*OVERSAMPLENR, 300},
	{71*OVERSAMPLENR, 246},
	{106*OVERSAMPLENR, 218},
	{141*OVERSAMPLENR, 199},
	{176*OVERSAMPLENR, 185},
	{211*OVERSAMPLENR, 173},
	{246*OVERSAMPLENR, 163},
	{281*OVERSAMPLENR, 155},
	{316*OVERSAMPLENR, 147},
	{351*OVERSAMPLENR, 140},
	{386*OVERSAMPLENR, 134},
	{421*OVERSAMPLENR, 128},
	{456*OVERSAMPLENR, 122},
	{491*OVERSAMPLENR, 117},
	{526*OVERSAMPLENR, 112},
	{561*OVERSAMPLENR, 107},
	{596*OVERSAMPLENR, 102},
	{631*OVERSAMPLENR, 97},
	{666*OVERSAMPLENR, 92},
	{701*OVERSAMPLENR, 87},
	{736*OVERSAMPLENR, 81},
	{771*OVERSAMPLENR, 76},
	{806*OVERSAMPLENR, 70},
	{841*OVERSAMPLENR, 63},
	{876*OVERSAMPLENR, 56},
	{911*OVERSAMPLENR, 48},
	{946*OVERSAMPLENR, 38},
	{981*OVERSAMPLENR, 23},
	{1005*OVERSAMPLENR, 5},
	{1016*OVERSAMPLENR, 0}
};
#endif
#if (THERMISTORHEATER_0 == 10) || (THERMISTORHEATER_1 == 10) || (THERMISTORHEATER_2 == 10) || (THERMISTORBED == 10)
// 100k RS thermistor 198-961 (4.7k pullup)
const short temptable_10[][2] PROGMEM = {
   {1*OVERSAMPLENR, 929},
   {36*OVERSAMPLENR, 299},
   {71*OVERSAMPLENR, 246},
   {106*OVERSAMPLENR, 217},
   {141*OVERSAMPLENR, 198},
   {176*OVERSAMPLENR, 184},
   {211*OVERSAMPLENR, 173},
   {246*OVERSAMPLENR, 163},
   {281*OVERSAMPLENR, 154},
   {316*OVERSAMPLENR, 147},
   {351*OVERSAMPLENR, 140},
   {386*OVERSAMPLENR, 134},
   {421*OVERSAMPLENR, 128},
   {456*OVERSAMPLENR, 122},
   {491*OVERSAMPLENR, 117},
   {526*OVERSAMPLENR, 112},
   {561*OVERSAMPLENR, 107},
   {596*OVERSAMPLENR, 102},
   {631*OVERSAMPLENR, 97},
   {666*OVERSAMPLENR, 91},
   {701*OVERSAMPLENR, 86},
   {736*OVERSAMPLENR, 81},
   {771*OVERSAMPLENR, 76},
   {806*OVERSAMPLENR, 70},
   {841*OVERSAMPLENR, 63},
   {876*OVERSAMPLENR, 56},
   {911*OVERSAMPLENR, 48},
   {946*OVERSAMPLENR, 38},
   {981*OVERSAMPLENR, 23},
   {1005*OVERSAMPLENR, 5},
   {1016*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 11) || (THERMISTORHEATER_1 == 11) || (THERMISTORHEATER_2 == 11) || (THERMISTORBED == 11)
// QU-BD silicone bed QWG-104F-3950 thermistor

const short temptable_11[][2] PROGMEM = {
         {1*OVERSAMPLENR,        938},
         {31*OVERSAMPLENR,       314},
         {41*OVERSAMPLENR,       290},
         {51*OVERSAMPLENR,       272},
         {61*OVERSAMPLENR,       258},
         {71*OVERSAMPLENR,       247},
         {81*OVERSAMPLENR,       237},
         {91*OVERSAMPLENR,       229},
         {101*OVERSAMPLENR,      221},
         {111*OVERSAMPLENR,      215},
         {121*OVERSAMPLENR,      209},
         {131*OVERSAMPLENR,      204},
         {141*OVERSAMPLENR,      199},
         {151*OVERSAMPLENR,      195},
         {161*OVERSAMPLENR,      190},
         {171*OVERSAMPLENR,      187},
         {181*OVERSAMPLENR,      183},
         {191*OVERSAMPLENR,      179},
         {201*OVERSAMPLENR,      176},
         {221*OVERSAMPLENR,      170},
         {241*OVERSAMPLENR,      165},
         {261*OVERSAMPLENR,      160},
         {281*OVERSAMPLENR,      155},
         {301*OVERSAMPLENR,      150},
         {331*OVERSAMPLENR,      144},
         {361*OVERSAMPLENR,      139},
         {391*OVERSAMPLENR,      133},
         {421*OVERSAMPLENR,      128},
         {451*OVERSAMPLENR,      123},
         {491*OVERSAMPLENR,      117},
         {531*OVERSAMPLENR,      111},
         {571*OVERSAMPLENR,      105},
         {611*OVERSAMPLENR,      100},
         {641*OVERSAMPLENR,      95},
         {681*OVERSAMPLENR,      90},
         {711*OVERSAMPLENR,      85},
         {751*OVERSAMPLENR,      79},
         {791*OVERSAMPLENR,      72},
         {811*OVERSAMPLENR,      69},
         {831*OVERSAMPLENR,      65},
         {871*OVERSAMPLENR,      57},
         {881*OVERSAMPLENR,      55},
         {901*OVERSAMPLENR,      51},
         {921*OVERSAMPLENR,      45},
         {941*OVERSAMPLENR,      39},
         {971*OVERSAMPLENR,      28},
         {981*OVERSAMPLENR,      23},
         {991*OVERSAMPLENR,      17},
         {1001*OVERSAMPLENR,     9},
         {1021*OVERSAMPLENR,     -27}
};
#endif

#if (THERMISTORHEATER_0 == 13) || (THERMISTORHEATER_1 == 13) || (THERMISTORHEATER_2 == 13) || (THERMISTORBED == 13)
// Hisens thermistor B25/50 =3950 +/-1%

const short temptable_13[][2] PROGMEM = {
 {	22.5*OVERSAMPLENR,	300	},
{	24.125*OVERSAMPLENR,	295	},
{	25.875*OVERSAMPLENR,	290	},
{	27.8125*OVERSAMPLENR,	285	},
{	29.9375*OVERSAMPLENR,	280	},
{	32.25*OVERSAMPLENR,	275	},
{	34.8125*OVERSAMPLENR,	270	},
{	37.625*OVERSAMPLENR,	265	},
{	40.6875*OVERSAMPLENR,	260	},
{	44.0625*OVERSAMPLENR,	255	},
{	47.75*OVERSAMPLENR,	250	},
{	51.8125*OVERSAMPLENR,	245	},
{	56.3125*OVERSAMPLENR,	240	},
{	61.25*OVERSAMPLENR,	235	},
{	66.75*OVERSAMPLENR,	230	},
{	72.8125*OVERSAMPLENR,	225	},
{	79.5*OVERSAMPLENR,	220	},
{	87*OVERSAMPLENR,	215	},
{	95.3125*OVERSAMPLENR,	210	},
{	104.1875*OVERSAMPLENR,	205	},
{	112.75*OVERSAMPLENR,	200	},
{	123.125*OVERSAMPLENR,	195	},
{	135.75*OVERSAMPLENR,	190	},
{	148.3125*OVERSAMPLENR,	185	},
{	163.8125*OVERSAMPLENR,	180	},
{	179*OVERSAMPLENR,	175	},
{	211.125*OVERSAMPLENR,	170	},
{	216.125*OVERSAMPLENR,	165	},
{	236.5625*OVERSAMPLENR,	160	},
{	258.5*OVERSAMPLENR,	155	},
{	279.875*OVERSAMPLENR,	150	},
{	305.375*OVERSAMPLENR,	145	},
{	333.25*OVERSAMPLENR,	140	},
{	362.5625*OVERSAMPLENR,	135	},
{	393.6875*OVERSAMPLENR,	130	},
{	425*OVERSAMPLENR,	125	},
{	460.625*OVERSAMPLENR,	120	},
{	495.1875*OVERSAMPLENR,	115	},
{	530.875*OVERSAMPLENR,	110	},
{	567.25*OVERSAMPLENR,	105	},
{	601.625*OVERSAMPLENR,	100	},
{	637.875*OVERSAMPLENR,	95	},
{	674.5625*OVERSAMPLENR,	90	},
{	710*OVERSAMPLENR,	85	},
{	744.125*OVERSAMPLENR,	80	},
{	775.9375*OVERSAMPLENR,	75	},
{	806.875*OVERSAMPLENR,	70	},
{	835.1875*OVERSAMPLENR,	65	},
{	861.125*OVERSAMPLENR,	60	},
{	884.375*OVERSAMPLENR,	55	},
{	904.5625*OVERSAMPLENR,	50	},
{	923.8125*OVERSAMPLENR,	45	},
{	940.375*OVERSAMPLENR,	40	},
{	954.625*OVERSAMPLENR,	35	},
{	966.875*OVERSAMPLENR,	30	},
{	977.0625*OVERSAMPLENR,	25	},
{	986*OVERSAMPLENR,	20	},
{	993.375*OVERSAMPLENR,	15	},
{	999.5*OVERSAMPLENR,	10	},
{	1004.5*OVERSAMPLENR,	5	},
{	1008.5*OVERSAMPLENR,	0	}

 };
#endif

#if (THERMISTORHEATER_0 == 20) || (THERMISTORHEATER_1 == 20) || (THERMISTORHEATER_2 == 20) || (THERMISTORBED == 20) // PT100 with INA826 amp on Ultimaker v2.0 electronics
/* The PT100 in the Ultimaker v2.0 electronics has a high sample value for a high temperature.
This does not match the normal thermistor behaviour so we need to set the following defines */
#if (THERMISTORHEATER_0 == 20)
# define HEATER_0_RAW_HI_TEMP 16383
# define HEATER_0_RAW_LO_TEMP 0
#endif
#if (THERMISTORHEATER_1 == 20)
# define HEATER_1_RAW_HI_TEMP 16383
# define HEATER_1_RAW_LO_TEMP 0
#endif
#if (THERMISTORHEATER_2 == 20)
# define HEATER_2_RAW_HI_TEMP 16383
# define HEATER_2_RAW_LO_TEMP 0
#endif
#if (THERMISTORBED == 20)
# define HEATER_BED_RAW_HI_TEMP 16383
# define HEATER_BED_RAW_LO_TEMP 0
#endif
const short temptable_20[][2] PROGMEM = {
{         0*OVERSAMPLENR ,       0     },
{       227*OVERSAMPLENR ,       1     },
{       236*OVERSAMPLENR ,       10     },
{       245*OVERSAMPLENR ,       20     },
{       253*OVERSAMPLENR ,       30     },
{       262*OVERSAMPLENR ,       40     },
{       270*OVERSAMPLENR ,       50     },
{       279*OVERSAMPLENR ,       60     },
{       287*OVERSAMPLENR ,       70     },
{       295*OVERSAMPLENR ,       80     },
{       304*OVERSAMPLENR ,       90     },
{       312*OVERSAMPLENR ,       100     },
{       320*OVERSAMPLENR ,       110     },
{       329*OVERSAMPLENR ,       120     },
{       337*OVERSAMPLENR ,       130     },
{       345*OVERSAMPLENR ,       140     },
{       353*OVERSAMPLENR ,       150     },
{       361*OVERSAMPLENR ,       160     },
{       369*OVERSAMPLENR ,       170     },
{       377*OVERSAMPLENR ,       180     },
{       385*OVERSAMPLENR ,       190     },
{       393*OVERSAMPLENR ,       200     },
{       401*OVERSAMPLENR ,       210     },
{       409*OVERSAMPLENR ,       220     },
{       417*OVERSAMPLENR ,       230     },
{       424*OVERSAMPLENR ,       240     },
{       432*OVERSAMPLENR ,       250     },
{       440*OVERSAMPLENR ,       260     },
{       447*OVERSAMPLENR ,       270     },
{       455*OVERSAMPLENR ,       280     },
{       463*OVERSAMPLENR ,       290     },
{       470*OVERSAMPLENR ,       300     },
{       478*OVERSAMPLENR ,       310     },
{       485*OVERSAMPLENR ,       320     },
{       493*OVERSAMPLENR ,       330     },
{       500*OVERSAMPLENR ,       340     },
{       507*OVERSAMPLENR ,       350     },
{       515*OVERSAMPLENR ,       360     },
{       522*OVERSAMPLENR ,       370     },
{       529*OVERSAMPLENR ,       380     },
{       537*OVERSAMPLENR ,       390     },
{       544*OVERSAMPLENR ,       400     },
{       614*OVERSAMPLENR ,       500     },
{       681*OVERSAMPLENR ,       600     },
{       744*OVERSAMPLENR ,       700     },
{       805*OVERSAMPLENR ,       800     },
{       862*OVERSAMPLENR ,       900     },
{       917*OVERSAMPLENR ,       1000     },
{       968*OVERSAMPLENR ,       1100     }
};
#endif

// PT100 with HX717 ADC convertor
const short temptable_21[][2] PROGMEM = {
  { OVERSAMPLENR*(995), 450},
  { OVERSAMPLENR*(345), 124},
  { OVERSAMPLENR*(10), 0},
};


// PT100 with LMV358IDT preamp 3.3V MCU only
const short temptable_22[][2] PROGMEM = {
  { OVERSAMPLENR*(983), 100},
  { OVERSAMPLENR*(56), 0}};

#if (THERMISTORHEATER_0 == 51) || (THERMISTORHEATER_1 == 51) || (THERMISTORHEATER_2 == 51) || (THERMISTORBED == 51)
// 100k EPCOS (WITH 1kohm RESISTOR FOR PULLUP, R9 ON SANGUINOLOLU! NOT FOR 4.7kohm PULLUP! THIS IS NOT NORMAL!)
// Verified by linagee.
// Calculated using 1kohm pullup, voltage divider math, and manufacturer provided temp/resistance
// Advantage: Twice the resolution and better linearity from 150C to 200C
const short temptable_51[][2] PROGMEM = {
   {1*OVERSAMPLENR, 350},
   {190*OVERSAMPLENR, 250}, //top rating 250C
   {203*OVERSAMPLENR, 245},
   {217*OVERSAMPLENR, 240},
   {232*OVERSAMPLENR, 235},
   {248*OVERSAMPLENR, 230},
   {265*OVERSAMPLENR, 225},
   {283*OVERSAMPLENR, 220},
   {302*OVERSAMPLENR, 215},
   {322*OVERSAMPLENR, 210},
   {344*OVERSAMPLENR, 205},
   {366*OVERSAMPLENR, 200},
   {390*OVERSAMPLENR, 195},
   {415*OVERSAMPLENR, 190},
   {440*OVERSAMPLENR, 185},
   {467*OVERSAMPLENR, 180},
   {494*OVERSAMPLENR, 175},
   {522*OVERSAMPLENR, 170},
   {551*OVERSAMPLENR, 165},
   {580*OVERSAMPLENR, 160},
   {609*OVERSAMPLENR, 155},
   {638*OVERSAMPLENR, 150},
   {666*OVERSAMPLENR, 145},
   {695*OVERSAMPLENR, 140},
   {722*OVERSAMPLENR, 135},
   {749*OVERSAMPLENR, 130},
   {775*OVERSAMPLENR, 125},
   {800*OVERSAMPLENR, 120},
   {823*OVERSAMPLENR, 115},
   {845*OVERSAMPLENR, 110},
   {865*OVERSAMPLENR, 105},
   {884*OVERSAMPLENR, 100},
   {901*OVERSAMPLENR, 95},
   {917*OVERSAMPLENR, 90},
   {932*OVERSAMPLENR, 85},
   {944*OVERSAMPLENR, 80},
   {956*OVERSAMPLENR, 75},
   {966*OVERSAMPLENR, 70},
   {975*OVERSAMPLENR, 65},
   {982*OVERSAMPLENR, 60},
   {989*OVERSAMPLENR, 55},
   {995*OVERSAMPLENR, 50},
   {1000*OVERSAMPLENR, 45},
   {1004*OVERSAMPLENR, 40},
   {1007*OVERSAMPLENR, 35},
   {1010*OVERSAMPLENR, 30},
   {1013*OVERSAMPLENR, 25},
   {1015*OVERSAMPLENR, 20},
   {1017*OVERSAMPLENR, 15},
   {1018*OVERSAMPLENR, 10},
   {1019*OVERSAMPLENR, 5},
   {1020*OVERSAMPLENR, 0},
   {1021*OVERSAMPLENR, -5}
};
#endif

#if (THERMISTORHEATER_0 == 52) || (THERMISTORHEATER_1 == 52) || (THERMISTORHEATER_2 == 52) || (THERMISTORBED == 52)
// 200k ATC Semitec 204GT-2 (WITH 1kohm RESISTOR FOR PULLUP, R9 ON SANGUINOLOLU! NOT FOR 4.7kohm PULLUP! THIS IS NOT NORMAL!)
// Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 1kohm pullup, voltage divider math, and manufacturer provided temp/resistance
// Advantage: More resolution and better linearity from 150C to 200C
const short temptable_52[][2] PROGMEM = {
   {1*OVERSAMPLENR, 500},
   {125*OVERSAMPLENR, 300}, //top rating 300C
   {142*OVERSAMPLENR, 290},
   {162*OVERSAMPLENR, 280},
   {185*OVERSAMPLENR, 270},
   {211*OVERSAMPLENR, 260},
   {240*OVERSAMPLENR, 250},
   {274*OVERSAMPLENR, 240},
   {312*OVERSAMPLENR, 230},
   {355*OVERSAMPLENR, 220},
   {401*OVERSAMPLENR, 210},
   {452*OVERSAMPLENR, 200},
   {506*OVERSAMPLENR, 190},
   {563*OVERSAMPLENR, 180},
   {620*OVERSAMPLENR, 170},
   {677*OVERSAMPLENR, 160},
   {732*OVERSAMPLENR, 150},
   {783*OVERSAMPLENR, 140},
   {830*OVERSAMPLENR, 130},
   {871*OVERSAMPLENR, 120},
   {906*OVERSAMPLENR, 110},
   {935*OVERSAMPLENR, 100},
   {958*OVERSAMPLENR, 90},
   {976*OVERSAMPLENR, 80},
   {990*OVERSAMPLENR, 70},
   {1000*OVERSAMPLENR, 60},
   {1008*OVERSAMPLENR, 50},
   {1013*OVERSAMPLENR, 40},
   {1017*OVERSAMPLENR, 30},
   {1019*OVERSAMPLENR, 20},
   {1021*OVERSAMPLENR, 10},
   {1022*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 55) || (THERMISTORHEATER_1 == 55) || (THERMISTORHEATER_2 == 55) || (THERMISTORBED == 55)
// 100k ATC Semitec 104GT-2 (Used on ParCan) (WITH 1kohm RESISTOR FOR PULLUP, R9 ON SANGUINOLOLU! NOT FOR 4.7kohm PULLUP! THIS IS NOT NORMAL!)
// Verified by linagee. Source: http://shop.arcol.hu/static/datasheets/thermistors.pdf
// Calculated using 1kohm pullup, voltage divider math, and manufacturer provided temp/resistance
// Advantage: More resolution and better linearity from 150C to 200C
const short temptable_55[][2] PROGMEM = {
   {1*OVERSAMPLENR, 500},
   {76*OVERSAMPLENR, 300},
   {87*OVERSAMPLENR, 290},
   {100*OVERSAMPLENR, 280},
   {114*OVERSAMPLENR, 270},
   {131*OVERSAMPLENR, 260},
   {152*OVERSAMPLENR, 250},
   {175*OVERSAMPLENR, 240},
   {202*OVERSAMPLENR, 230},
   {234*OVERSAMPLENR, 220},
   {271*OVERSAMPLENR, 210},
   {312*OVERSAMPLENR, 200},
   {359*OVERSAMPLENR, 190},
   {411*OVERSAMPLENR, 180},
   {467*OVERSAMPLENR, 170},
   {527*OVERSAMPLENR, 160},
   {590*OVERSAMPLENR, 150},
   {652*OVERSAMPLENR, 140},
   {713*OVERSAMPLENR, 130},
   {770*OVERSAMPLENR, 120},
   {822*OVERSAMPLENR, 110},
   {867*OVERSAMPLENR, 100},
   {905*OVERSAMPLENR, 90},
   {936*OVERSAMPLENR, 80},
   {961*OVERSAMPLENR, 70},
   {979*OVERSAMPLENR, 60},
   {993*OVERSAMPLENR, 50},
   {1003*OVERSAMPLENR, 40},
   {1010*OVERSAMPLENR, 30},
   {1015*OVERSAMPLENR, 20},
   {1018*OVERSAMPLENR, 10},
   {1020*OVERSAMPLENR, 0}
};
#endif

#if (THERMISTORHEATER_0 == 60) || (THERMISTORHEATER_1 == 60) || (THERMISTORHEATER_2 == 60) || (THERMISTORBED == 60) // Maker's Tool Works Kapton Bed Thermister
// ./createTemperatureLookup.py --r0=100000 --t0=25 --r1=0 --r2=4700 --beta=3950
// r0: 100000
// t0: 25
// r1: 0 (parallel with rTherm)
// r2: 4700 (series with rTherm)
// beta: 3950
// min adc: 1 at 0.0048828125 V
// max adc: 1023 at 4.9951171875 V
const short temptable_60[][2] PROGMEM = {
   {51*OVERSAMPLENR, 272},
   {61*OVERSAMPLENR, 258},
   {71*OVERSAMPLENR, 247},
   {81*OVERSAMPLENR, 237},
   {91*OVERSAMPLENR, 229},
   {101*OVERSAMPLENR, 221},
   {131*OVERSAMPLENR, 204},
   {161*OVERSAMPLENR, 190},
   {191*OVERSAMPLENR, 179},
   {231*OVERSAMPLENR, 167},
   {271*OVERSAMPLENR, 157},
   {311*OVERSAMPLENR, 148},
   {351*OVERSAMPLENR, 140},
   {381*OVERSAMPLENR, 135},
   {411*OVERSAMPLENR, 130},
   {441*OVERSAMPLENR, 125},
   {451*OVERSAMPLENR, 123},
   {461*OVERSAMPLENR, 122},
   {471*OVERSAMPLENR, 120},
   {481*OVERSAMPLENR, 119},
   {491*OVERSAMPLENR, 117},
   {501*OVERSAMPLENR, 116},
   {511*OVERSAMPLENR, 114},
   {521*OVERSAMPLENR, 113},
   {531*OVERSAMPLENR, 111},
   {541*OVERSAMPLENR, 110},
   {551*OVERSAMPLENR, 108},
   {561*OVERSAMPLENR, 107},
   {571*OVERSAMPLENR, 105},
   {581*OVERSAMPLENR, 104},
   {591*OVERSAMPLENR, 102},
   {601*OVERSAMPLENR, 101},
   {611*OVERSAMPLENR, 100},
   {621*OVERSAMPLENR, 98},
   {631*OVERSAMPLENR, 97},
   {641*OVERSAMPLENR, 95},
   {651*OVERSAMPLENR, 94},
   {661*OVERSAMPLENR, 92},
   {671*OVERSAMPLENR, 91},
   {681*OVERSAMPLENR, 90},
   {691*OVERSAMPLENR, 88},
   {701*OVERSAMPLENR, 87},
   {711*OVERSAMPLENR, 85},
   {721*OVERSAMPLENR, 84},
   {731*OVERSAMPLENR, 82},
   {741*OVERSAMPLENR, 81},
   {751*OVERSAMPLENR, 79},
   {761*OVERSAMPLENR, 77},
   {771*OVERSAMPLENR, 76},
   {781*OVERSAMPLENR, 74},
   {791*OVERSAMPLENR, 72},
   {801*OVERSAMPLENR, 71},
   {811*OVERSAMPLENR, 69},
   {821*OVERSAMPLENR, 67},
   {831*OVERSAMPLENR, 65},
   {841*OVERSAMPLENR, 63},
   {851*OVERSAMPLENR, 62},
   {861*OVERSAMPLENR, 60},
   {871*OVERSAMPLENR, 57},
   {881*OVERSAMPLENR, 55},
   {891*OVERSAMPLENR, 53},
   {901*OVERSAMPLENR, 51},
   {911*OVERSAMPLENR, 48},
   {921*OVERSAMPLENR, 45},
   {931*OVERSAMPLENR, 42},
   {941*OVERSAMPLENR, 39},
   {951*OVERSAMPLENR, 36},
   {961*OVERSAMPLENR, 32},
   {981*OVERSAMPLENR, 23},
   {991*OVERSAMPLENR, 17},
   {1001*OVERSAMPLENR, 9},
   {1008*OVERSAMPLENR, 0},
};
#endif
#if (THERMISTORBED == 12)
//100k 0603 SMD Vishay NTCS0603E3104FXT (4.7k pullup) (calibrated for Makibox hot bed)
const short temptable_12[][2] PROGMEM = {
   {35*OVERSAMPLENR, 180}, //top rating 180C
   {211*OVERSAMPLENR, 140},
   {233*OVERSAMPLENR, 135},
   {261*OVERSAMPLENR, 130},
   {290*OVERSAMPLENR, 125},
   {328*OVERSAMPLENR, 120},
   {362*OVERSAMPLENR, 115},
   {406*OVERSAMPLENR, 110},
   {446*OVERSAMPLENR, 105},
   {496*OVERSAMPLENR, 100},
   {539*OVERSAMPLENR, 95},
   {585*OVERSAMPLENR, 90},
   {629*OVERSAMPLENR, 85},
   {675*OVERSAMPLENR, 80},
   {718*OVERSAMPLENR, 75},
   {758*OVERSAMPLENR, 70},
   {793*OVERSAMPLENR, 65},
   {822*OVERSAMPLENR, 60},
   {841*OVERSAMPLENR, 55},
   {875*OVERSAMPLENR, 50},
   {899*OVERSAMPLENR, 45},
   {926*OVERSAMPLENR, 40},
   {946*OVERSAMPLENR, 35},
   {962*OVERSAMPLENR, 30},
   {977*OVERSAMPLENR, 25},
   {987*OVERSAMPLENR, 20},
   {995*OVERSAMPLENR, 15},
   {1001*OVERSAMPLENR, 10},
   {1010*OVERSAMPLENR, 0},
   {1023*OVERSAMPLENR, -40},
};
#endif

// Pt1000 and Pt100 handling
//
// Rt=R0*(1+a*T+b*T*T) [for T>0]
// a=3.9083E-3, b=-5.775E-7

#define PtA 3.9083E-3
#define PtB -5.775E-7
#define PtC -4.183E-12
#define PtRt(T,R0) ((R0)*(1.0+(PtA)*(T)+(PtB)*(T)*(T)))
#define PtRtNew(T,R0) ((R0)*(1.0+(PtA)*(T)+(PtB)*(T)*(T) + (T-100)*PtC*(T)*(T)*(T)))
#define PtAdVal(T,R0,Rup) (short)(1024/(Rup/PtRt(T,R0)+1))
#define PtLine(T,R0,Rup) { PtAdVal(T,R0,Rup)*OVERSAMPLENR, T },

#if (THERMISTORHEATER_0 == 110) || (THERMISTORHEATER_1 == 110) || (THERMISTORHEATER_2 == 110) || (THERMISTORBED == 110) // Pt100 with 1k0 pullup
const short temptable_110[][2] PROGMEM = {
// only few values are needed as the curve is very flat
  PtLine(0,100,1000)
  PtLine(50,100,1000)
  PtLine(100,100,1000)
  PtLine(150,100,1000)
  PtLine(200,100,1000)
  PtLine(250,100,1000)
  PtLine(300,100,1000)
};
#endif
#if (THERMISTORHEATER_0 == 147) || (THERMISTORHEATER_1 == 147) || (THERMISTORHEATER_2 == 147) || (THERMISTORBED == 147) // Pt100 with 4k7 pullup
const short temptable_147[][2] PROGMEM = {
// only few values are needed as the curve is very flat
  PtLine(0,100,4700)
  PtLine(50,100,4700)
  PtLine(100,100,4700)
  PtLine(150,100,4700)
  PtLine(200,100,4700)
  PtLine(250,100,4700)
  PtLine(300,100,4700)
};
#endif
// E3D Pt100 with 4k7 MiniRambo pullup, no Amp on the MiniRambo v1.3a
#if (THERMISTORHEATER_0 == 148) || (THERMISTORHEATER_1 == 148) || (THERMISTORHEATER_2 == 148) || (THERMISTORBED == 148)
const short temptable_148[][2] PROGMEM = {
// These values have been calculated and tested over many days.  See https://docs.google.com/spreadsheets/d/1MJXa6feEe0mGVCT2TrBwLxVOMoLDkJlvfQ4JXhAdV_E
// Values that are missing from the 5C gap are missing due to resolution limits.
{19.00000 * OVERSAMPLENR,  0},
{19.25000 * OVERSAMPLENR,  5},
{19.50000 * OVERSAMPLENR, 10},
{19.87500 * OVERSAMPLENR, 15},
{20.25000 * OVERSAMPLENR, 20},
{21.00000 * OVERSAMPLENR, 25},
{21.75000 * OVERSAMPLENR, 35},
{22.00000 * OVERSAMPLENR, 40},
{23.00000 * OVERSAMPLENR, 50},  // 55C is more commonly used.
{23.75000 * OVERSAMPLENR, 60},
{24.00000 * OVERSAMPLENR, 65},
{24.06250 * OVERSAMPLENR, 70},
{25.00000 * OVERSAMPLENR, 75},
{25.50000 * OVERSAMPLENR, 85},
{26.00000 * OVERSAMPLENR, 90},
{26.93750 * OVERSAMPLENR,100},
{27.00000 * OVERSAMPLENR,105},
{27.37500 * OVERSAMPLENR,110},
{28.00000 * OVERSAMPLENR,115},
{29.00000 * OVERSAMPLENR,125},
{29.25000 * OVERSAMPLENR,135},
{30.00000 * OVERSAMPLENR,140},
{35.50000 * OVERSAMPLENR,150},
{31.00000 * OVERSAMPLENR,155},
{32.00000 * OVERSAMPLENR,165},
{32.18750 * OVERSAMPLENR,175},
{33.00000 * OVERSAMPLENR,180},
{33.62500 * OVERSAMPLENR,190},
{34.00000 * OVERSAMPLENR,195},
{35.00000 * OVERSAMPLENR,205},
{35.50000 * OVERSAMPLENR,215},
{36.00000 * OVERSAMPLENR,220},
{36.75000 * OVERSAMPLENR,230},
{37.00000 * OVERSAMPLENR,235},
{37.75000 * OVERSAMPLENR,245},
{38.00000 * OVERSAMPLENR,250},
{38.12500 * OVERSAMPLENR,255},
{39.00000 * OVERSAMPLENR,260},
{40.00000 * OVERSAMPLENR,275},
{40.25000 * OVERSAMPLENR,285},
{41.00000 * OVERSAMPLENR,290},
{41.25000 * OVERSAMPLENR,300},
{42.00000 * OVERSAMPLENR,305},
{43.00000 * OVERSAMPLENR,315},
{43.25000 * OVERSAMPLENR,325},
{44.00000 * OVERSAMPLENR,330},
{44.18750 * OVERSAMPLENR,340},
{45.00000 * OVERSAMPLENR,345},
{45.25000 * OVERSAMPLENR,355},
{46.00000 * OVERSAMPLENR,360},
{46.62500 * OVERSAMPLENR,370},
{47.00000 * OVERSAMPLENR,375},
{47.25000 * OVERSAMPLENR,385},
{48.00000 * OVERSAMPLENR,390},
{48.75000 * OVERSAMPLENR,400},
{49.00000 * OVERSAMPLENR,405},
};
#endif
#if (THERMISTORHEATER_0 == 247) || (THERMISTORHEATER_1 == 247) || (THERMISTORHEATER_2 == 247) || (THERMISTORBED == 247) // Pt100 with 4k7 MiniRambo pullup & PT100 Amplifier
const short temptable_247[][2] PROGMEM = {
// Calculated from Bob-the-Kuhn's PT100 calculator listed in https://github.com/MarlinFirmware/Marlin/issues/5543
// and the table provided by E3D at http://wiki.e3d-online.com/wiki/E3D_PT100_Amplifier_Documentation#Output_Characteristics.
{  0 * OVERSAMPLENR,    0},
{241 * OVERSAMPLENR,    1},
{249 * OVERSAMPLENR,   10},
{259 * OVERSAMPLENR,   20},
{267 * OVERSAMPLENR,   30},
{275 * OVERSAMPLENR,   40},
{283 * OVERSAMPLENR,   50},
{291 * OVERSAMPLENR,   60},
{299 * OVERSAMPLENR,   70},
{307 * OVERSAMPLENR,   80},
{315 * OVERSAMPLENR,   90},
{323 * OVERSAMPLENR,  100},
{331 * OVERSAMPLENR,  110},
{340 * OVERSAMPLENR,  120},
{348 * OVERSAMPLENR,  130},
{354 * OVERSAMPLENR,  140},
{362 * OVERSAMPLENR,  150},
{370 * OVERSAMPLENR,  160},
{378 * OVERSAMPLENR,  170},
{386 * OVERSAMPLENR,  180},
{394 * OVERSAMPLENR,  190},
{402 * OVERSAMPLENR,  200},
{410 * OVERSAMPLENR,  210},
{418 * OVERSAMPLENR,  220},
{426 * OVERSAMPLENR,  230},
{432 * OVERSAMPLENR,  240},
{440 * OVERSAMPLENR,  250},
{448 * OVERSAMPLENR,  260},
{454 * OVERSAMPLENR,  270},
{462 * OVERSAMPLENR,  280},
{469 * OVERSAMPLENR,  290},
{475 * OVERSAMPLENR,  300},
{483 * OVERSAMPLENR,  310},
{491 * OVERSAMPLENR,  320},
{499 * OVERSAMPLENR,  330},
{505 * OVERSAMPLENR,  340},
{513 * OVERSAMPLENR,  350},
{519 * OVERSAMPLENR,  360},
{527 * OVERSAMPLENR,  370},
{533 * OVERSAMPLENR,  380},
{541 * OVERSAMPLENR,  390},
{549 * OVERSAMPLENR,  400},
{616 * OVERSAMPLENR,  500},
{682 * OVERSAMPLENR,  600},
{741 * OVERSAMPLENR,  700},
{801 * OVERSAMPLENR,  800},
{856 * OVERSAMPLENR,  900},
{910 * OVERSAMPLENR, 1000},
{960 * OVERSAMPLENR, 1100},
};
#endif
#if (THERMISTORHEATER_0 == 1010) || (THERMISTORHEATER_1 == 1010) || (THERMISTORHEATER_2 == 1010) || (THERMISTORBED == 1010) // Pt1000 with 1k0 pullup
const short temptable_1010[][2] PROGMEM = {
  PtLine(0,1000,1000)
  PtLine(25,1000,1000)
  PtLine(50,1000,1000)
  PtLine(75,1000,1000)
  PtLine(100,1000,1000)
  PtLine(125,1000,1000)
  PtLine(150,1000,1000)
  PtLine(175,1000,1000)
  PtLine(200,1000,1000)
  PtLine(225,1000,1000)
  PtLine(250,1000,1000)
  PtLine(275,1000,1000)
  PtLine(300,1000,1000)
};
#endif
#if (THERMISTORHEATER_0 == 1047) || (THERMISTORHEATER_1 == 1047) || (THERMISTORHEATER_2 == 1047) || (THERMISTORBED == 1047) // Pt1000 with 4k7 pullup
const short temptable_1047[][2] PROGMEM = {
// only few values are needed as the curve is very flat
  PtLine(0,1000,4700)
  PtLine(50,1000,4700)
  PtLine(100,1000,4700)
  PtLine(150,1000,4700)
  PtLine(200,1000,4700)
  PtLine(250,1000,4700)
  PtLine(300,1000,4700)
};
#endif

#if (THERMISTORAMBIENT == 2000) //100k thermistor NTCG104LH104JT1
const short temptable_2000[][2] PROGMEM = {
// Source: https://product.tdk.com/info/en/catalog/datasheets/503021/tpd_ntc-thermistor_ntcg_en.pdf
// Calculated using 4.7kohm pullup, voltage divider math, and manufacturer provided temp/resistance
/*{305*OVERSAMPLENR, 125},
{338*OVERSAMPLENR, 120},
{374*OVERSAMPLENR, 115},
{412*OVERSAMPLENR, 110},
{452*OVERSAMPLENR, 105},
{494*OVERSAMPLENR, 100},
{536*OVERSAMPLENR, 95},
{580*OVERSAMPLENR, 90},
{623*OVERSAMPLENR, 85},
{665*OVERSAMPLENR, 80},
{706*OVERSAMPLENR, 75},
{744*OVERSAMPLENR, 70},
{780*OVERSAMPLENR, 65},
{813*OVERSAMPLENR, 60},
{843*OVERSAMPLENR, 55},
{869*OVERSAMPLENR, 50},
{892*OVERSAMPLENR, 45},
{912*OVERSAMPLENR, 40},
{929*OVERSAMPLENR, 35},
{943*OVERSAMPLENR, 30},
{955*OVERSAMPLENR, 25},
{965*OVERSAMPLENR, 20},
{973*OVERSAMPLENR, 15},
{979*OVERSAMPLENR, 10},
{984*OVERSAMPLENR, 5},
{988*OVERSAMPLENR, 0},
{991*OVERSAMPLENR, -5},
{993*OVERSAMPLENR, -10},
{995*OVERSAMPLENR, -15},
{996*OVERSAMPLENR, -20},
{997*OVERSAMPLENR, -25},
{998*OVERSAMPLENR, -30},
{999*OVERSAMPLENR, -35},
{999*OVERSAMPLENR, -40},*/
{313*OVERSAMPLENR,125},
{347*OVERSAMPLENR,120},
{383*OVERSAMPLENR,115},
{422*OVERSAMPLENR,110},
{463*OVERSAMPLENR,105},
{506*OVERSAMPLENR,100},
{549*OVERSAMPLENR,95},
{594*OVERSAMPLENR,90},
{638*OVERSAMPLENR,85},
{681*OVERSAMPLENR,80},
{722*OVERSAMPLENR,75},
{762*OVERSAMPLENR,70},
{799*OVERSAMPLENR,65},
{833*OVERSAMPLENR,60},
{863*OVERSAMPLENR,55},
{890*OVERSAMPLENR,50},
{914*OVERSAMPLENR,45},
{934*OVERSAMPLENR,40},
{951*OVERSAMPLENR,35},
{966*OVERSAMPLENR,30},
{978*OVERSAMPLENR,25},
{988*OVERSAMPLENR,20},
{996*OVERSAMPLENR,15},
{1002*OVERSAMPLENR,10},
{1007*OVERSAMPLENR,5},
{1012*OVERSAMPLENR,0},
{1015*OVERSAMPLENR,-5},
{1017*OVERSAMPLENR,-10},
{1019*OVERSAMPLENR,-15},
{1020*OVERSAMPLENR,-20},
{1021*OVERSAMPLENR,-25},
{1022*OVERSAMPLENR,-30},
{1023*OVERSAMPLENR,-35},
{1023*OVERSAMPLENR,-40},
};
#endif

const short temptable_2004[][2] PROGMEM = {
{ OVERSAMPLENR*(354), 125 },
{ OVERSAMPLENR*(387), 120 },
{ OVERSAMPLENR*(463), 110 },
{ OVERSAMPLENR*(543), 100 },
{ OVERSAMPLENR*(626), 90 },
{ OVERSAMPLENR*(706), 80 },
{ OVERSAMPLENR*(780), 70 },
{ OVERSAMPLENR*(844), 60 },
{ OVERSAMPLENR*(896), 50 },
{ OVERSAMPLENR*(937), 40 },
{ OVERSAMPLENR*(966), 30 },
{ OVERSAMPLENR*(987), 20 },
{ OVERSAMPLENR*(1001), 10 },
{ OVERSAMPLENR*(1010), 0 },
{ OVERSAMPLENR*(1016), -10 },
{ OVERSAMPLENR*(1019), -20 },
{ OVERSAMPLENR*(1021), -30 },
};


const short temptable_2005[][2] PROGMEM = {
{ OVERSAMPLENR*(50), 350 }, // Synthetic value to test max temp error
{ OVERSAMPLENR*(78), 300 },
{ OVERSAMPLENR*(102), 280 },
{ OVERSAMPLENR*(134), 260 },
{ OVERSAMPLENR*(178), 240 },
{ OVERSAMPLENR*(237), 220 },
{ OVERSAMPLENR*(315), 200 },
{ OVERSAMPLENR*(414), 180 },
{ OVERSAMPLENR*(530), 160 },
{ OVERSAMPLENR*(654), 140 },
{ OVERSAMPLENR*(771), 120 },
{ OVERSAMPLENR*(867), 100 },
{ OVERSAMPLENR*(922), 85 },
{ OVERSAMPLENR*(936), 80 },
{ OVERSAMPLENR*(979), 60 },
{ OVERSAMPLENR*(993), 50 },
{ OVERSAMPLENR*(1003), 40 },
{ OVERSAMPLENR*(1013), 25 },
{ OVERSAMPLENR*(1018), 10 },
{ OVERSAMPLENR*(1020), 0 },
{ OVERSAMPLENR*(1021), -10 },
{ OVERSAMPLENR*(1023), -30 },
};

const short temptable_2006[][2] = {
{	OVERSAMPLENR*0	,	126	},
{	OVERSAMPLENR*1107	,	125	},
{	OVERSAMPLENR*1134	,	124	},
{	OVERSAMPLENR*1161	,	123	},
{	OVERSAMPLENR*1184	,	122	},
{	OVERSAMPLENR*1214	,	121	},
{	OVERSAMPLENR*1223	,	120	},
{	OVERSAMPLENR*1265	,	119	},
{	OVERSAMPLENR*1294	,	118	},
{	OVERSAMPLENR*1326	,	117	},
{	OVERSAMPLENR*1346	,	116	},
{	OVERSAMPLENR*1385	,	115	},
{	OVERSAMPLENR*1422	,	114	},
{	OVERSAMPLENR*1459	,	112	},
{	OVERSAMPLENR*1459	,	113	},
{	OVERSAMPLENR*1494	,	111	},
{	OVERSAMPLENR*1529	,	110	},
{	OVERSAMPLENR*1596	,	108	},
{	OVERSAMPLENR*1628	,	107	},
{	OVERSAMPLENR*1659	,	106	},
{	OVERSAMPLENR*1690	,	105	},
{	OVERSAMPLENR*1748	,	104	},
{	OVERSAMPLENR*1777	,	103	},
{	OVERSAMPLENR*1804	,	102	},
{	OVERSAMPLENR*1857	,	101	},
{	OVERSAMPLENR*1857	,	109	},
{	OVERSAMPLENR*1883	,	100	},
{	OVERSAMPLENR*1908	,	99	},
{	OVERSAMPLENR*1957	,	98	},
{	OVERSAMPLENR*1980	,	97	},
{	OVERSAMPLENR*2026	,	96	},
{	OVERSAMPLENR*2048	,	95	},
{	OVERSAMPLENR*2091	,	94	},
{	OVERSAMPLENR*2132	,	93	},
{	OVERSAMPLENR*2171	,	92	},
{	OVERSAMPLENR*2209	,	91	},
{	OVERSAMPLENR*2227	,	90	},
{	OVERSAMPLENR*2280	,	89	},
{	OVERSAMPLENR*2313	,	88	},
{	OVERSAMPLENR*2346	,	87	},
{	OVERSAMPLENR*2392	,	86	},
{	OVERSAMPLENR*2422	,	85	},
{	OVERSAMPLENR*2465	,	84	},
{	OVERSAMPLENR*2518	,	83	},
{	OVERSAMPLENR*2531	,	82	},
{	OVERSAMPLENR*2568	,	81	},
{	OVERSAMPLENR*2604	,	80	},
{	OVERSAMPLENR*2638	,	79	},
{	OVERSAMPLENR*2680	,	78	},
{	OVERSAMPLENR*2721	,	77	},
{	OVERSAMPLENR*2750	,	76	},
{	OVERSAMPLENR*2786	,	75	},
{	OVERSAMPLENR*2821	,	74	},
{	OVERSAMPLENR*2854	,	73	},
{	OVERSAMPLENR*2893	,	72	},
{	OVERSAMPLENR*2922	,	71	},
{	OVERSAMPLENR*2957	,	70	},
{	OVERSAMPLENR*2990	,	69	},
{	OVERSAMPLENR*3026	,	68	},
{	OVERSAMPLENR*3055	,	67	},
{	OVERSAMPLENR*3088	,	66	},
{	OVERSAMPLENR*3119	,	65	},
{	OVERSAMPLENR*3152	,	64	},
{	OVERSAMPLENR*3179	,	63	},
{	OVERSAMPLENR*3209	,	62	},
{	OVERSAMPLENR*3240	,	61	},
{	OVERSAMPLENR*3266	,	60	},
{	OVERSAMPLENR*3294	,	59	},
{	OVERSAMPLENR*3320	,	58	},
{	OVERSAMPLENR*3347	,	57	},
{	OVERSAMPLENR*3375	,	56	},
{	OVERSAMPLENR*3401	,	55	},
{	OVERSAMPLENR*3425	,	54	},
{	OVERSAMPLENR*3448	,	53	},
{	OVERSAMPLENR*3473	,	52	},
{	OVERSAMPLENR*3496	,	51	},
{	OVERSAMPLENR*3520	,	50	},
{	OVERSAMPLENR*3541	,	49	},
{	OVERSAMPLENR*3563	,	48	},
{	OVERSAMPLENR*3583	,	47	},
{	OVERSAMPLENR*3602	,	46	},
{	OVERSAMPLENR*3623	,	45	},
{	OVERSAMPLENR*3642	,	44	},
{	OVERSAMPLENR*3660	,	43	},
{	OVERSAMPLENR*3677	,	42	},
{	OVERSAMPLENR*3695	,	41	},
{	OVERSAMPLENR*3712	,	40	},
{	OVERSAMPLENR*3728	,	39	},
{	OVERSAMPLENR*3743	,	38	},
{	OVERSAMPLENR*3759	,	37	},
{	OVERSAMPLENR*3774	,	36	},
{	OVERSAMPLENR*3787	,	35	},
{	OVERSAMPLENR*3801	,	34	},
{	OVERSAMPLENR*3814	,	33	},
{	OVERSAMPLENR*3827	,	32	},
{	OVERSAMPLENR*3839	,	31	},
{	OVERSAMPLENR*3851	,	30	},
{	OVERSAMPLENR*3862	,	29	},
{	OVERSAMPLENR*3873	,	28	},
{	OVERSAMPLENR*3883	,	27	},
{	OVERSAMPLENR*3893	,	26	},
{	OVERSAMPLENR*3903	,	25	},
{	OVERSAMPLENR*3912	,	24	},
{	OVERSAMPLENR*3921	,	23	},
{	OVERSAMPLENR*3928	,	22	},
{	OVERSAMPLENR*3937	,	21	},
{	OVERSAMPLENR*3943	,	20	},
{	OVERSAMPLENR*3951	,	19	},
{	OVERSAMPLENR*3957	,	18	},
{	OVERSAMPLENR*3964	,	17	},
{	OVERSAMPLENR*3970	,	16	},
{	OVERSAMPLENR*3976	,	15	},
{	OVERSAMPLENR*3982	,	14	},
{	OVERSAMPLENR*3988	,	13	},
{	OVERSAMPLENR*3993	,	12	},
{	OVERSAMPLENR*3998	,	11	},
{	OVERSAMPLENR*4003	,	10	},
{	OVERSAMPLENR*4008	,	9	},
{	OVERSAMPLENR*4012	,	8	},
{	OVERSAMPLENR*4016	,	7	},
{	OVERSAMPLENR*4020	,	6	},
{	OVERSAMPLENR*4024	,	5	},
{	OVERSAMPLENR*4028	,	4	},
{	OVERSAMPLENR*4032	,	3	},
{	OVERSAMPLENR*4035	,	2	},
{	OVERSAMPLENR*4038	,	1	},
{	OVERSAMPLENR*4041	,	0	}
};


const short temptable_2007[][2] = {
{OVERSAMPLENR*	0	,	290	},
{OVERSAMPLENR*	1405	,	289	},
{OVERSAMPLENR*	1411	,	288	},
{OVERSAMPLENR*	1417	,	287	},
{OVERSAMPLENR*	1423	,	286	},
{OVERSAMPLENR*	1429	,	285	},
{OVERSAMPLENR*	1435	,	284	},
{OVERSAMPLENR*	1441	,	283	},
{OVERSAMPLENR*	1447	,	282	},
{OVERSAMPLENR*	1454	,	281	},
{OVERSAMPLENR*	1460	,	280	},
{OVERSAMPLENR*	1466	,	279	},
{OVERSAMPLENR*	1473	,	278	},
{OVERSAMPLENR*	1480	,	277	},
{OVERSAMPLENR*	1486	,	276	},
{OVERSAMPLENR*	1493	,	275	},
{OVERSAMPLENR*	1500	,	274	},
{OVERSAMPLENR*	1507	,	273	},
{OVERSAMPLENR*	1513	,	272	},
{OVERSAMPLENR*	1520	,	271	},
{OVERSAMPLENR*	1527	,	270	},
{OVERSAMPLENR*	1534	,	269	},
{OVERSAMPLENR*	1542	,	268	},
{OVERSAMPLENR*	1549	,	267	},
{OVERSAMPLENR*	1557	,	266	},
{OVERSAMPLENR*	1565	,	265	},
{OVERSAMPLENR*	1572	,	264	},
{OVERSAMPLENR*	1580	,	263	},
{OVERSAMPLENR*	1587	,	262	},
{OVERSAMPLENR*	1595	,	261	},
{OVERSAMPLENR*	1602	,	260	},
{OVERSAMPLENR*	1611	,	259	},
{OVERSAMPLENR*	1619	,	258	},
{OVERSAMPLENR*	1628	,	257	},
{OVERSAMPLENR*	1636	,	256	},
{OVERSAMPLENR*	1645	,	255	},
{OVERSAMPLENR*	1653	,	254	},
{OVERSAMPLENR*	1662	,	253	},
{OVERSAMPLENR*	1670	,	252	},
{OVERSAMPLENR*	1679	,	251	},
{OVERSAMPLENR*	1687	,	250	},
{OVERSAMPLENR*	1698	,	249	},
{OVERSAMPLENR*	1708	,	248	},
{OVERSAMPLENR*	1719	,	247	},
{OVERSAMPLENR*	1729	,	246	},
{OVERSAMPLENR*	1740	,	245	},
{OVERSAMPLENR*	1750	,	244	},
{OVERSAMPLENR*	1760	,	243	},
{OVERSAMPLENR*	1771	,	242	},
{OVERSAMPLENR*	1781	,	241	},
{OVERSAMPLENR*	1792	,	240	},
{OVERSAMPLENR*	1803	,	239	},
{OVERSAMPLENR*	1813	,	238	},
{OVERSAMPLENR*	1824	,	237	},
{OVERSAMPLENR*	1835	,	236	},
{OVERSAMPLENR*	1846	,	235	},
{OVERSAMPLENR*	1856	,	234	},
{OVERSAMPLENR*	1867	,	233	},
{OVERSAMPLENR*	1878	,	232	},
{OVERSAMPLENR*	1889	,	231	},
{OVERSAMPLENR*	1900	,	230	},
{OVERSAMPLENR*	1912	,	229	},
{OVERSAMPLENR*	1924	,	228	},
{OVERSAMPLENR*	1936	,	227	},
{OVERSAMPLENR*	1948	,	226	},
{OVERSAMPLENR*	1961	,	225	},
{OVERSAMPLENR*	1973	,	224	},
{OVERSAMPLENR*	1985	,	223	},
{OVERSAMPLENR*	1997	,	222	},
{OVERSAMPLENR*	2010	,	221	},
{OVERSAMPLENR*	2022	,	220	},
{OVERSAMPLENR*	2035	,	219	},
{OVERSAMPLENR*	2049	,	218	},
{OVERSAMPLENR*	2062	,	217	},
{OVERSAMPLENR*	2075	,	216	},
{OVERSAMPLENR*	2089	,	215	},
{OVERSAMPLENR*	2102	,	214	},
{OVERSAMPLENR*	2115	,	213	},
{OVERSAMPLENR*	2129	,	212	},
{OVERSAMPLENR*	2142	,	211	},
{OVERSAMPLENR*	2155	,	210	},
{OVERSAMPLENR*	2170	,	209	},
{OVERSAMPLENR*	2184	,	208	},
{OVERSAMPLENR*	2199	,	207	},
{OVERSAMPLENR*	2214	,	206	},
{OVERSAMPLENR*	2228	,	205	},
{OVERSAMPLENR*	2243	,	204	},
{OVERSAMPLENR*	2257	,	203	},
{OVERSAMPLENR*	2272	,	202	},
{OVERSAMPLENR*	2286	,	201	},
{OVERSAMPLENR*	2301	,	200	},
{OVERSAMPLENR*	2317	,	199	},
{OVERSAMPLENR*	2333	,	198	},
{OVERSAMPLENR*	2349	,	197	},
{OVERSAMPLENR*	2365	,	196	},
{OVERSAMPLENR*	2380	,	195	},
{OVERSAMPLENR*	2396	,	194	},
{OVERSAMPLENR*	2412	,	193	},
{OVERSAMPLENR*	2428	,	192	},
{OVERSAMPLENR*	2444	,	191	},
{OVERSAMPLENR*	2460	,	190	},
{OVERSAMPLENR*	2478	,	189	},
{OVERSAMPLENR*	2495	,	188	},
{OVERSAMPLENR*	2513	,	187	},
{OVERSAMPLENR*	2530	,	186	},
{OVERSAMPLENR*	2548	,	185	},
{OVERSAMPLENR*	2566	,	184	},
{OVERSAMPLENR*	2583	,	183	},
{OVERSAMPLENR*	2601	,	182	},
{OVERSAMPLENR*	2618	,	181	},
{OVERSAMPLENR*	2636	,	180	},
{OVERSAMPLENR*	2654	,	179	},
{OVERSAMPLENR*	2671	,	178	},
{OVERSAMPLENR*	2689	,	177	},
{OVERSAMPLENR*	2707	,	176	},
{OVERSAMPLENR*	2725	,	175	},
{OVERSAMPLENR*	2742	,	174	},
{OVERSAMPLENR*	2760	,	173	},
{OVERSAMPLENR*	2778	,	172	},
{OVERSAMPLENR*	2796	,	171	},
{OVERSAMPLENR*	2813	,	170	},
{OVERSAMPLENR*	2830	,	169	},
{OVERSAMPLENR*	2847	,	168	},
{OVERSAMPLENR*	2864	,	167	},
{OVERSAMPLENR*	2881	,	166	},
{OVERSAMPLENR*	2898	,	165	},
{OVERSAMPLENR*	2915	,	164	},
{OVERSAMPLENR*	2933	,	163	},
{OVERSAMPLENR*	2950	,	162	},
{OVERSAMPLENR*	2967	,	161	},
{OVERSAMPLENR*	2984	,	160	},
{OVERSAMPLENR*	3001	,	159	},
{OVERSAMPLENR*	3018	,	158	},
{OVERSAMPLENR*	3035	,	157	},
{OVERSAMPLENR*	3052	,	156	},
{OVERSAMPLENR*	3069	,	155	},
{OVERSAMPLENR*	3086	,	154	},
{OVERSAMPLENR*	3103	,	153	},
{OVERSAMPLENR*	3120	,	152	},
{OVERSAMPLENR*	3137	,	151	},
{OVERSAMPLENR*	3154	,	150	},
{OVERSAMPLENR*	3170	,	149	},
{OVERSAMPLENR*	3187	,	148	},
{OVERSAMPLENR*	3203	,	147	},
{OVERSAMPLENR*	3219	,	146	},
{OVERSAMPLENR*	3235	,	145	},
{OVERSAMPLENR*	3251	,	144	},
{OVERSAMPLENR*	3267	,	143	},
{OVERSAMPLENR*	3283	,	142	},
{OVERSAMPLENR*	3299	,	141	},
{OVERSAMPLENR*	3315	,	140	},
{OVERSAMPLENR*	3330	,	139	},
{OVERSAMPLENR*	3345	,	138	},
{OVERSAMPLENR*	3360	,	137	},
{OVERSAMPLENR*	3375	,	136	},
{OVERSAMPLENR*	3390	,	135	},
{OVERSAMPLENR*	3404	,	134	},
{OVERSAMPLENR*	3419	,	133	},
{OVERSAMPLENR*	3434	,	132	},
{OVERSAMPLENR*	3449	,	131	},
{OVERSAMPLENR*	3464	,	130	},
{OVERSAMPLENR*	3477	,	129	},
{OVERSAMPLENR*	3490	,	128	},
{OVERSAMPLENR*	3503	,	127	},
{OVERSAMPLENR*	3516	,	126	},
{OVERSAMPLENR*	3529	,	125	},
{OVERSAMPLENR*	3542	,	124	},
{OVERSAMPLENR*	3555	,	123	},
{OVERSAMPLENR*	3569	,	122	},
{OVERSAMPLENR*	3582	,	121	},
{OVERSAMPLENR*	3595	,	120	},
{OVERSAMPLENR*	3606	,	119	},
{OVERSAMPLENR*	3618	,	118	},
{OVERSAMPLENR*	3629	,	117	},
{OVERSAMPLENR*	3641	,	116	},
{OVERSAMPLENR*	3652	,	115	},
{OVERSAMPLENR*	3664	,	114	},
{OVERSAMPLENR*	3675	,	113	},
{OVERSAMPLENR*	3687	,	112	},
{OVERSAMPLENR*	3698	,	111	},
{OVERSAMPLENR*	3710	,	110	},
{OVERSAMPLENR*	3719	,	109	},
{OVERSAMPLENR*	3728	,	108	},
{OVERSAMPLENR*	3737	,	107	},
{OVERSAMPLENR*	3746	,	106	},
{OVERSAMPLENR*	3755	,	105	},
{OVERSAMPLENR*	3764	,	104	},
{OVERSAMPLENR*	3773	,	103	},
{OVERSAMPLENR*	3782	,	102	},
{OVERSAMPLENR*	3791	,	101	},
{OVERSAMPLENR*	3800	,	100	},
{OVERSAMPLENR*	3808	,	99	},
{OVERSAMPLENR*	3816	,	98	},
{OVERSAMPLENR*	3824	,	97	},
{OVERSAMPLENR*	3832	,	96	},
{OVERSAMPLENR*	3840	,	95	},
{OVERSAMPLENR*	3848	,	94	},
{OVERSAMPLENR*	3856	,	93	},
{OVERSAMPLENR*	3864	,	92	},
{OVERSAMPLENR*	3872	,	91	},
{OVERSAMPLENR*	3880	,	90	},
{OVERSAMPLENR*	3886	,	89	},
{OVERSAMPLENR*	3892	,	88	},
{OVERSAMPLENR*	3899	,	87	},
{OVERSAMPLENR*	3905	,	86	},
{OVERSAMPLENR*	3911	,	85	},
{OVERSAMPLENR*	3917	,	84	},
{OVERSAMPLENR*	3923	,	83	},
{OVERSAMPLENR*	3930	,	82	},
{OVERSAMPLENR*	3936	,	81	},
{OVERSAMPLENR*	3942	,	80	},
{OVERSAMPLENR*	3946	,	79	},
{OVERSAMPLENR*	3951	,	78	},
{OVERSAMPLENR*	3956	,	77	},
{OVERSAMPLENR*	3960	,	76	},
{OVERSAMPLENR*	3965	,	75	},
{OVERSAMPLENR*	3969	,	74	},
{OVERSAMPLENR*	3974	,	73	},
{OVERSAMPLENR*	3978	,	72	},
{OVERSAMPLENR*	3983	,	71	},
{OVERSAMPLENR*	3987	,	70	},
{OVERSAMPLENR*	3990	,	69	},
{OVERSAMPLENR*	3993	,	68	},
{OVERSAMPLENR*	3996	,	67	},
{OVERSAMPLENR*	3999	,	66	},
{OVERSAMPLENR*	4002	,	65	},
{OVERSAMPLENR*	4005	,	64	},
{OVERSAMPLENR*	4008	,	63	},
{OVERSAMPLENR*	4011	,	62	},
{OVERSAMPLENR*	4014	,	61	},
{OVERSAMPLENR*	4016	,	60	},
{OVERSAMPLENR*	4020	,	59	},
{OVERSAMPLENR*	4023	,	58	},
{OVERSAMPLENR*	4027	,	57	},
{OVERSAMPLENR*	4030	,	56	},
{OVERSAMPLENR*	4033	,	55	},
{OVERSAMPLENR*	4035	,	54	},
{OVERSAMPLENR*	4037	,	53	},
{OVERSAMPLENR*	4039	,	52	},
{OVERSAMPLENR*	4041	,	51	},
{OVERSAMPLENR*	4043	,	50	},
{OVERSAMPLENR*	4044	,	49	},
{OVERSAMPLENR*	4046	,	48	},
{OVERSAMPLENR*	4047	,	47	},
{OVERSAMPLENR*	4049	,	46	},
{OVERSAMPLENR*	4051	,	45	},
{OVERSAMPLENR*	4053	,	44	},
{OVERSAMPLENR*	4055	,	43	},
{OVERSAMPLENR*	4057	,	42	},
{OVERSAMPLENR*	4059	,	41	},
{OVERSAMPLENR*	4061	,	40	},
{OVERSAMPLENR*	4062	,	39	},
{OVERSAMPLENR*	4064	,	38	},
{OVERSAMPLENR*	4066	,	37	},
{OVERSAMPLENR*	4067	,	36	},
{OVERSAMPLENR*	4069	,	35	},
{OVERSAMPLENR*	4070	,	34	},
{OVERSAMPLENR*	4072	,	33	},
{OVERSAMPLENR*	4074	,	32	},
{OVERSAMPLENR*	4075	,	31	},
{OVERSAMPLENR*	4077	,	30	},
{OVERSAMPLENR*	4078	,	29	},
{OVERSAMPLENR*	4079	,	28	},
{OVERSAMPLENR*	4080	,	27	},
{OVERSAMPLENR*	4081	,	26	},
{OVERSAMPLENR*	4082	,	25	},
{OVERSAMPLENR*	4083	,	24	},
{OVERSAMPLENR*	4084	,	23	},
{OVERSAMPLENR*	4084	,	22	},
{OVERSAMPLENR*	4084	,	21	},
{OVERSAMPLENR*	4084	,	20	},
{OVERSAMPLENR*	4085	,	19	},
{OVERSAMPLENR*	4085	,	18	},
{OVERSAMPLENR*	4085	,	17	},
{OVERSAMPLENR*	4085	,	16	},
{OVERSAMPLENR*	4086	,	15	},
{OVERSAMPLENR*	4086	,	14	},
{OVERSAMPLENR*	4086	,	13	},
{OVERSAMPLENR*	4086	,	12	},
{OVERSAMPLENR*	4087	,	11	},
{OVERSAMPLENR*	4087	,	10	},
{OVERSAMPLENR*	4087	,	9	},
{OVERSAMPLENR*	4087	,	8	},
{OVERSAMPLENR*	4087	,	7	},
{OVERSAMPLENR*	4088	,	6	},
{OVERSAMPLENR*	4088	,	5	},
{OVERSAMPLENR*	4088	,	4	},
{OVERSAMPLENR*	4088	,	3	},
{OVERSAMPLENR*	4089	,	2	},
{OVERSAMPLENR*	4089	,	1	},
{OVERSAMPLENR*	4089	,	0	},
};

const short temptable_2008[][2] = {
{OVERSAMPLENR*	4095	,	1023	},
{OVERSAMPLENR*	4079	,	1018	},
{OVERSAMPLENR*	4062	,	1013	},
{OVERSAMPLENR*	4046	,	1008	},
{OVERSAMPLENR*	4029	,	1003	},
{OVERSAMPLENR*	4013	,	998	},
{OVERSAMPLENR*	3996	,	993	},
{OVERSAMPLENR*	3980	,	988	},
{OVERSAMPLENR*	3963	,	983	},
{OVERSAMPLENR*	3947	,	978	},
{OVERSAMPLENR*	3930	,	973	},
{OVERSAMPLENR*	3914	,	968	},
{OVERSAMPLENR*	3897	,	963	},
{OVERSAMPLENR*	3881	,	958	},
{OVERSAMPLENR*	3864	,	953	},
{OVERSAMPLENR*	3848	,	948	},
{OVERSAMPLENR*	3831	,	943	},
{OVERSAMPLENR*	3815	,	938	},
{OVERSAMPLENR*	3798	,	933	},
{OVERSAMPLENR*	3782	,	928	},
{OVERSAMPLENR*	3765	,	923	},
{OVERSAMPLENR*	3749	,	918	},
{OVERSAMPLENR*	3732	,	913	},
{OVERSAMPLENR*	3716	,	908	},
{OVERSAMPLENR*	3699	,	903	},
{OVERSAMPLENR*	3683	,	898	},
{OVERSAMPLENR*	3666	,	893	},
{OVERSAMPLENR*	3650	,	888	},
{OVERSAMPLENR*	3633	,	883	},
{OVERSAMPLENR*	3617	,	878	},
{OVERSAMPLENR*	3600	,	873	},
{OVERSAMPLENR*	3584	,	868	},
{OVERSAMPLENR*	3567	,	863	},
{OVERSAMPLENR*	3551	,	858	},
{OVERSAMPLENR*	3534	,	853	},
{OVERSAMPLENR*	3518	,	848	},
{OVERSAMPLENR*	3501	,	843	},
{OVERSAMPLENR*	3485	,	838	},
{OVERSAMPLENR*	3468	,	833	},
{OVERSAMPLENR*	3452	,	828	},
{OVERSAMPLENR*	3435	,	823	},
{OVERSAMPLENR*	3419	,	818	},
{OVERSAMPLENR*	3402	,	813	},
{OVERSAMPLENR*	3386	,	808	},
{OVERSAMPLENR*	3369	,	803	},
{OVERSAMPLENR*	3353	,	798	},
{OVERSAMPLENR*	3336	,	793	},
{OVERSAMPLENR*	3320	,	788	},
{OVERSAMPLENR*	3303	,	783	},
{OVERSAMPLENR*	3287	,	778	},
{OVERSAMPLENR*	3270	,	773	},
{OVERSAMPLENR*	3254	,	768	},
{OVERSAMPLENR*	3237	,	763	},
{OVERSAMPLENR*	3221	,	758	},
{OVERSAMPLENR*	3204	,	753	},
{OVERSAMPLENR*	3188	,	748	},
{OVERSAMPLENR*	3171	,	743	},
{OVERSAMPLENR*	3155	,	738	},
{OVERSAMPLENR*	3138	,	733	},
{OVERSAMPLENR*	3122	,	728	},
{OVERSAMPLENR*	3105	,	723	},
{OVERSAMPLENR*	3089	,	718	},
{OVERSAMPLENR*	3072	,	713	},
{OVERSAMPLENR*	3056	,	708	},
{OVERSAMPLENR*	3039	,	703	},
{OVERSAMPLENR*	3023	,	698	},
{OVERSAMPLENR*	3006	,	693	},
{OVERSAMPLENR*	2990	,	688	},
{OVERSAMPLENR*	2973	,	683	},
{OVERSAMPLENR*	2957	,	678	},
{OVERSAMPLENR*	2940	,	673	},
{OVERSAMPLENR*	2924	,	668	},
{OVERSAMPLENR*	2907	,	663	},
{OVERSAMPLENR*	2891	,	658	},
{OVERSAMPLENR*	2874	,	653	},
{OVERSAMPLENR*	2858	,	648	},
{OVERSAMPLENR*	2841	,	643	},
{OVERSAMPLENR*	2825	,	638	},
{OVERSAMPLENR*	2808	,	633	},
{OVERSAMPLENR*	2792	,	628	},
{OVERSAMPLENR*	2775	,	623	},
{OVERSAMPLENR*	2759	,	618	},
{OVERSAMPLENR*	2742	,	613	},
{OVERSAMPLENR*	2726	,	608	},
{OVERSAMPLENR*	2709	,	603	},
{OVERSAMPLENR*	2693	,	598	},
{OVERSAMPLENR*	2676	,	593	},
{OVERSAMPLENR*	2660	,	588	},
{OVERSAMPLENR*	2643	,	583	},
{OVERSAMPLENR*	2627	,	578	},
{OVERSAMPLENR*	2610	,	573	},
{OVERSAMPLENR*	2594	,	568	},
{OVERSAMPLENR*	2577	,	563	},
{OVERSAMPLENR*	2561	,	558	},
{OVERSAMPLENR*	2544	,	553	},
{OVERSAMPLENR*	2528	,	548	},
{OVERSAMPLENR*	2511	,	543	},
{OVERSAMPLENR*	2495	,	538	},
{OVERSAMPLENR*	2478	,	533	},
{OVERSAMPLENR*	2462	,	528	},
{OVERSAMPLENR*	2445	,	523	},
{OVERSAMPLENR*	2429	,	518	},
{OVERSAMPLENR*	2412	,	513	},
{OVERSAMPLENR*	2396	,	508	},
{OVERSAMPLENR*	2379	,	503	},
{OVERSAMPLENR*	2363	,	498	},
{OVERSAMPLENR*	2346	,	493	},
{OVERSAMPLENR*	2330	,	488	},
{OVERSAMPLENR*	2313	,	483	},
{OVERSAMPLENR*	2297	,	478	},
{OVERSAMPLENR*	2280	,	473	},
{OVERSAMPLENR*	2264	,	468	},
{OVERSAMPLENR*	2247	,	463	},
{OVERSAMPLENR*	2231	,	458	},
{OVERSAMPLENR*	2214	,	453	},
{OVERSAMPLENR*	2198	,	448	},
{OVERSAMPLENR*	2181	,	443	},
{OVERSAMPLENR*	2165	,	438	},
{OVERSAMPLENR*	2148	,	433	},
{OVERSAMPLENR*	2132	,	428	},
{OVERSAMPLENR*	2115	,	423	},
{OVERSAMPLENR*	2099	,	418	},
{OVERSAMPLENR*	2082	,	413	},
{OVERSAMPLENR*	2066	,	408	},
{OVERSAMPLENR*	2049	,	403	},
{OVERSAMPLENR*	2033	,	398	},
{OVERSAMPLENR*	2016	,	393	},
{OVERSAMPLENR*	2000	,	388	},
{OVERSAMPLENR*	1983	,	383	},
{OVERSAMPLENR*	1967	,	378	},
{OVERSAMPLENR*	1950	,	373	},
{OVERSAMPLENR*	1934	,	368	},
{OVERSAMPLENR*	1917	,	363	},
{OVERSAMPLENR*	1901	,	358	},
{OVERSAMPLENR*	1884	,	353	},
{OVERSAMPLENR*	1868	,	348	},
{OVERSAMPLENR*	1851	,	343	},
{OVERSAMPLENR*	1835	,	338	},
{OVERSAMPLENR*	1818	,	333	},
{OVERSAMPLENR*	1802	,	328	},
{OVERSAMPLENR*	1785	,	323	},
{OVERSAMPLENR*	1769	,	318	},
{OVERSAMPLENR*	1752	,	313	},
{OVERSAMPLENR*	1736	,	308	},
{OVERSAMPLENR*	1719	,	303	},
{OVERSAMPLENR*	1703	,	298	},
{OVERSAMPLENR*	1686	,	293	},
{OVERSAMPLENR*	1670	,	288	},
{OVERSAMPLENR*	1653	,	283	},
{OVERSAMPLENR*	1637	,	278	},
{OVERSAMPLENR*	1620	,	273	},
{OVERSAMPLENR*	1604	,	268	},
{OVERSAMPLENR*	1587	,	263	},
{OVERSAMPLENR*	1571	,	258	},
{OVERSAMPLENR*	1554	,	253	},
{OVERSAMPLENR*	1538	,	248	},
{OVERSAMPLENR*	1521	,	243	},
{OVERSAMPLENR*	1505	,	238	},
{OVERSAMPLENR*	1488	,	233	},
{OVERSAMPLENR*	1472	,	228	},
{OVERSAMPLENR*	1455	,	223	},
{OVERSAMPLENR*	1439	,	218	},
{OVERSAMPLENR*	1422	,	213	},
{OVERSAMPLENR*	1406	,	208	},
{OVERSAMPLENR*	1389	,	203	},
{OVERSAMPLENR*	1373	,	198	},
{OVERSAMPLENR*	1356	,	193	},
{OVERSAMPLENR*	1340	,	188	},
{OVERSAMPLENR*	1323	,	183	},
{OVERSAMPLENR*	1307	,	178	},
{OVERSAMPLENR*	1290	,	173	},
{OVERSAMPLENR*	1274	,	168	},
{OVERSAMPLENR*	1257	,	163	},
{OVERSAMPLENR*	1241	,	158	},
{OVERSAMPLENR*	1224	,	153	},
{OVERSAMPLENR*	1208	,	148	},
{OVERSAMPLENR*	1191	,	143	},
{OVERSAMPLENR*	1175	,	138	},
{OVERSAMPLENR*	1158	,	133	},
{OVERSAMPLENR*	1142	,	128	},
{OVERSAMPLENR*	1125	,	123	},
{OVERSAMPLENR*	1109	,	118	},
{OVERSAMPLENR*	1092	,	113	},
{OVERSAMPLENR*	1076	,	108	},
{OVERSAMPLENR*	1059	,	103	},
{OVERSAMPLENR*	1043	,	98	},
{OVERSAMPLENR*	1026	,	93	},
{OVERSAMPLENR*	1010	,	88	},
{OVERSAMPLENR*	993	,	83	},
{OVERSAMPLENR*	977	,	78	},
{OVERSAMPLENR*	960	,	73	},
{OVERSAMPLENR*	944	,	68	},
{OVERSAMPLENR*	927	,	63	},
{OVERSAMPLENR*	911	,	58	},
{OVERSAMPLENR*	894	,	53	},
{OVERSAMPLENR*	878	,	48	},
{OVERSAMPLENR*	861	,	43	},
{OVERSAMPLENR*	845	,	38	},
{OVERSAMPLENR*	828	,	33	},
{OVERSAMPLENR*	812	,	28	},
{OVERSAMPLENR*	795	,	23	},
{OVERSAMPLENR*	779	,	18	},
{OVERSAMPLENR*	762	,	13	},
{OVERSAMPLENR*	746	,	8	},
{OVERSAMPLENR*	729	,	3	},
{OVERSAMPLENR*	720	,	0	},
};

#define _TT_NAME(_N) temptable_ ## _N
#define TT_NAME(_N) _TT_NAME(_N)

#ifdef THERMISTORHEATER_0
# define HEATER_0_TEMPTABLE TT_NAME(THERMISTORHEATER_0)
# define HEATER_0_TEMPTABLE_LEN (sizeof(HEATER_0_TEMPTABLE)/sizeof(*HEATER_0_TEMPTABLE))
#else
# ifdef HEATER_0_USES_THERMISTOR
#  error No heater 0 thermistor table specified
# else  // HEATER_0_USES_THERMISTOR
#  define HEATER_0_TEMPTABLE NULL
#  define HEATER_0_TEMPTABLE_LEN 0
# endif // HEATER_0_USES_THERMISTOR
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_0_RAW_HI_TEMP
# ifdef HEATER_0_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_0_RAW_HI_TEMP 0
#  define HEATER_0_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_0_RAW_HI_TEMP 16383
#  define HEATER_0_RAW_LO_TEMP 0
# endif
#endif

#ifdef THERMISTORHEATER_1
# define HEATER_1_TEMPTABLE TT_NAME(THERMISTORHEATER_1)
# define HEATER_1_TEMPTABLE_LEN (sizeof(HEATER_1_TEMPTABLE)/sizeof(*HEATER_1_TEMPTABLE))
#else
# ifdef HEATER_1_USES_THERMISTOR
#  error No heater 1 thermistor table specified
# else  // HEATER_1_USES_THERMISTOR
#  define HEATER_1_TEMPTABLE NULL
#  define HEATER_1_TEMPTABLE_LEN 0
# endif // HEATER_1_USES_THERMISTOR
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_1_RAW_HI_TEMP
# ifdef HEATER_1_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_1_RAW_HI_TEMP 0
#  define HEATER_1_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_1_RAW_HI_TEMP 16383
#  define HEATER_1_RAW_LO_TEMP 0
# endif
#endif

#ifdef THERMISTORHEATER_2
# define HEATER_2_TEMPTABLE TT_NAME(THERMISTORHEATER_2)
# define HEATER_2_TEMPTABLE_LEN (sizeof(HEATER_2_TEMPTABLE)/sizeof(*HEATER_2_TEMPTABLE))
#else
# ifdef HEATER_2_USES_THERMISTOR
#  error No heater 2 thermistor table specified
# else  // HEATER_2_USES_THERMISTOR
#  define HEATER_2_TEMPTABLE NULL
#  define HEATER_2_TEMPTABLE_LEN 0
# endif // HEATER_2_USES_THERMISTOR
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_2_RAW_HI_TEMP
# ifdef HEATER_2_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_2_RAW_HI_TEMP 0
#  define HEATER_2_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_2_RAW_HI_TEMP 16383
#  define HEATER_2_RAW_LO_TEMP 0
# endif
#endif

#ifdef THERMISTORBED
# define BEDTEMPTABLE TT_NAME(THERMISTORBED)
# define BEDTEMPTABLE_LEN (sizeof(BEDTEMPTABLE)/sizeof(*BEDTEMPTABLE))
#else
# ifdef BED_USES_THERMISTOR
#  error No bed thermistor table specified
# endif // BED_USES_THERMISTOR
#endif

#ifdef THERMISTORAMBIENT
# define AMBIENTTEMPTABLE TT_NAME(THERMISTORAMBIENT)
# define AMBIENTTEMPTABLE_LEN (sizeof(AMBIENTTEMPTABLE)/sizeof(*AMBIENTTEMPTABLE))
#endif

//Set the high and low raw values for the heater, this indicates which raw value is a high or low temperature
#ifndef HEATER_BED_RAW_HI_TEMP
# ifdef BED_USES_THERMISTOR   //In case of a thermistor the highest temperature results in the lowest ADC value
#  define HEATER_BED_RAW_HI_TEMP 0
#  define HEATER_BED_RAW_LO_TEMP 16383
# else                          //In case of an thermocouple the highest temperature results in the highest ADC value
#  define HEATER_BED_RAW_HI_TEMP 16383
#  define HEATER_BED_RAW_LO_TEMP 0
# endif
#endif

#endif //THERMISTORTABLES_H_
